// src/shared/ui/MaintenanceScreen/MaintenanceScreen.tsx
'use client';

import React, { useEffect, useState } from 'react';
import Image from 'next/image';
import styles from './MaintenanceScreen.module.scss';

// src/shared/ui/MaintenanceScreen/MaintenanceScreen.tsx

// src/shared/ui/MaintenanceScreen/MaintenanceScreen.tsx

// src/shared/ui/MaintenanceScreen/MaintenanceScreen.tsx

export const MaintenanceScreen: React.FC = () => {
    // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
    const maintenanceMessages = [
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º...',
        '–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—à–∏–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...',
        '–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É ASIC —á–∏–ø–æ–≤...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞–π–Ω–∏–Ω–≥–∞...',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º...',
        '–ó–∞—Ä—è–∂–∞–µ–º –º–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω—ã...',
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª–∞–º...',
        '–ö–∞–ª–∏–±—Ä—É–µ–º —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ...',
        '–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...',
        '–ì–æ—Ç–æ–≤–∏–º —Ä–æ–±–æ—Ç–æ–≤-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...',
        '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...',
        '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º...',
    ];

    const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
    const [progress, setProgress] = useState(0);
    const [isCompleted, setIsCompleted] = useState(false);

    // –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    useEffect(() => {
        const messageInterval = setInterval(() => {
            setCurrentMessageIndex((prevIndex) => (prevIndex + 1) % maintenanceMessages.length);
        }, 3000); // –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

        return () => clearInterval(messageInterval);
    }, [maintenanceMessages.length]);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã)
    useEffect(() => {
        const progressInterval = setInterval(() => {
            setProgress((prev) => {
                const newProgress = prev + Math.random() * 5; // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
                if (newProgress >= 100) {
                    setIsCompleted(true);
                    clearInterval(progressInterval);
                    return 100;
                }
                return newProgress;
            });
        }, 500);

        return () => clearInterval(progressInterval);
    }, []);

    return (
        <div className={styles.maintenanceScreen}>
            <div className={styles.content}>
                {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ–±–æ—Ç-–º–µ—Ö–∞–Ω–∏–∫ */}
                <div className={styles.robotContainer}>
                    <Image
                        src="/images/mascot.webp" // –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        alt="–†–æ–±–æ—Ç-–º–µ—Ö–∞–Ω–∏–∫"
                        width={120}
                        height={120}
                        className={styles.robot}
                        priority
                    />
                    {/* –ò–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∫—Ä—É–≥ —Ä–æ–±–æ—Ç–∞ */}
                    <div className={styles.processIcons}>
                        <span className={styles.icon1}>‚öôÔ∏è</span>
                        <span className={styles.icon2}>‚ö°</span>
                        <span className={styles.icon3}>üõ†Ô∏è</span>
                    </div>
                </div>

                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <h1 className={styles.title}>
                    <span className={styles.highlight}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</span>
                </h1>

                {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ */}
                <div className={styles.messageContainer}>
                    <p className={styles.message}>{maintenanceMessages[currentMessageIndex]}</p>
                    <div className={styles.typingIndicator}>
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>

            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
            <div className={styles.animatedBackground}>
                {[...Array(20)].map((_, i) => (
                    <div
                        key={i}
                        className={styles.floatingElement}
                        style={{
                            left: `${Math.random() * 100}%`,
                            animationDelay: `${Math.random() * 5}s`,
                            animationDuration: `${15 + Math.random() * 10}s`,
                        }}
                    >
                        {['‚õèÔ∏è', '‚ö°', 'üíª', 'üîß', '‚öôÔ∏è'][Math.floor(Math.random() * 5)]}
                    </div>
                ))}
            </div>
        </div>
    );
};
