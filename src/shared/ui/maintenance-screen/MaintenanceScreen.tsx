'use client';

import React, { useCallback, useEffect, useRef, useState } from 'react';
import Image from 'next/image';
import { AnimatedBackground } from './AnimatedBackground';
import styles from './MaintenanceScreen.module.scss';

export const MaintenanceScreen: React.FC = () => {
    // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
    const maintenanceMessages = [
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã...',
        '–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—à–∏–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...',
        '–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É ASIC —á–∏–ø–æ–≤...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞–π–Ω–∏–Ω–≥–∞...',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º...',
        '–ó–∞—Ä—è–∂–∞–µ–º –º–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω—ã...',
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª–∞–º...',
        '–ö–∞–ª–∏–±—Ä—É–µ–º —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ...',
        '–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...',
        '–ì–æ—Ç–æ–≤–∏–º —Ä–æ–±–æ—Ç–æ–≤-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...',
        '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã...',
        '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É GPU...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–æ–≤...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è...',
        '–ö–∞–ª–∏–±—Ä—É–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞–π–Ω–µ—Ä–æ–≤...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–ª–æ–∫—á–µ–π–Ω-–Ω–æ–¥...',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...',
        '–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...',
        '–û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç...',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏...',
        '–ù–∞–Ω–æ—Å–∏–º —Ç–µ—Ä–º–æ–ø–∞—Å—Ç—É...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É ASIC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤...',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–∏–Ω–≥–∞...',
        '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –æ—Ö–ª–∞–∂–¥–∞—é—â–∏—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π...',
        '–û–±–Ω–æ–≤–ª—è–µ–º –º–∏–∫—Ä–æ–∫–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏...',
        '–ö–∞–ª–∏–±—Ä—É–µ–º –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–ª–æ–∫–æ–≤ –ø–∏—Ç–∞–Ω–∏—è...',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è...',
        '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —à–∞—Ö—Ç –º–∞–π–Ω–∏–Ω–≥–∞...',
        '–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã overclocking...',
        '–ö–∞–ª–∏–±—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è...',
        '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏...',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É–ª–æ–≤...',
    ];

    const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
    const [position, setPosition] = useState({ x: 0, y: 0 });
    const [isDragging, setIsDragging] = useState(false);
    const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
    const contentRef = useRef<HTMLDivElement>(null);
    const usedIndices = useRef<Set<number>>(new Set());

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    const getRandomIndex = useCallback((currentIndex: number, maxLength: number): number => {
        if (maxLength <= 1) return 0;

        // –ï—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        if (usedIndices.current.size >= maxLength) {
            usedIndices.current.clear();
        }

        let newIndex;
        do {
            newIndex = Math.floor(Math.random() * maxLength);
        } while (newIndex === currentIndex && maxLength > 1);

        usedIndices.current.add(newIndex);
        return newIndex;
    }, []);

    // –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–Ω–¥–æ–º–Ω–∞—è)
    useEffect(() => {
        const messageInterval = setInterval(() => {
            setCurrentMessageIndex((prevIndex) =>
                getRandomIndex(prevIndex, maintenanceMessages.length)
            );
        }, 3000);

        return () => clearInterval(messageInterval);
    }, [maintenanceMessages.length, getRandomIndex]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag and drop —Å useCallback –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const handleMouseMove = useCallback(
        (e: MouseEvent) => {
            if (!isDragging) return;

            setPosition({
                x: e.clientX - dragStart.x,
                y: e.clientY - dragStart.y,
            });
        },
        [isDragging, dragStart]
    );

    const handleMouseUp = useCallback(() => {
        if (isDragging) {
            setIsDragging(false);
            // –ü–ª–∞–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
            setPosition({ x: 0, y: 0 });
        }
    }, [isDragging]);

    const handleMouseDown = (e: React.MouseEvent) => {
        setIsDragging(true);
        setDragStart({
            x: e.clientX - position.x,
            y: e.clientY - position.y,
        });
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    useEffect(() => {
        if (isDragging) {
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);

            return () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
        }
    }, [isDragging, handleMouseMove, handleMouseUp]);

    return (
        <div className={styles.maintenanceScreen}>
            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
            <AnimatedBackground />

            <div
                className={styles.content}
                ref={contentRef}
                style={{
                    transform: `translate(${position.x}px, ${position.y}px)`,
                    transition: isDragging
                        ? 'none'
                        : 'transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)',
                    cursor: isDragging ? 'grabbing' : 'grab',
                }}
                onMouseDown={handleMouseDown}
            >
                <div className={styles.glassFilter}></div>
                <div className={styles.glassOverlay}></div>
                <div className={styles.glassSpecular}></div>

                {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ–±–æ—Ç-–º–µ—Ö–∞–Ω–∏–∫ */}
                <div className={styles.robotContainer}>
                    <Image
                        src="/images/mascot.webp"
                        alt="–†–æ–±–æ—Ç-–º–µ—Ö–∞–Ω–∏–∫"
                        width={120}
                        height={120}
                        className={styles.robot}
                        priority
                    />
                    {/* –ò–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∫—Ä—É–≥ —Ä–æ–±–æ—Ç–∞ */}
                    <div className={styles.processIcons}>
                        <span className={styles.icon1}>‚öôÔ∏è</span>
                        <span className={styles.icon2}>‚ö°</span>
                        <span className={styles.icon3}>üõ†Ô∏è</span>
                    </div>
                </div>

                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <h1 className={styles.title}>
                    <span className={styles.highlight}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</span>
                </h1>

                {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ */}
                <p className={styles.message}>{maintenanceMessages[currentMessageIndex]}</p>
            </div>

            <svg className={styles.svg}>
                <filter id="lg-dist" x="0%" y="0%" width="100%" height="100%">
                    <feTurbulence
                        type="fractalNoise"
                        baseFrequency="0.008 0.008"
                        numOctaves="2"
                        seed="92"
                        result="noise"
                    />
                    <feGaussianBlur in="noise" stdDeviation="2" result="blurred" />
                    <feDisplacementMap
                        in="SourceGraphic"
                        in2="blurred"
                        scale="70"
                        xChannelSelector="R"
                        yChannelSelector="G"
                    />
                </filter>
            </svg>
        </div>
    );
};
