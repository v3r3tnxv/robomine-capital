

===== C:\Users\USER\Projects\robomine-capital\next.config.ts =====

import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
    async rewrites() {
        return [
            {
                source: '/api/:path*',
                destination: 'http://localhost:5000/api/:path*',
            },
        ];
    },
};

export default nextConfig;


===== C:\Users\USER\Projects\robomine-capital\src\app\deposit\page.tsx =====

// @/app/deposit/page.tsx
import { DepositForm } from '@/features/deposit';
import { BackButton } from '@/shared/ui';
import { Header } from '@/widgets/header';
import styles from './Deposit.module.scss';

export default function DepositPage() {
    return (
        <div className={styles.depositPage}>
            <BackButton />
            <h1 className={styles.title}>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</h1>
            <Header />
            <div className={styles.formContainer}>
                <span>–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</span>
                <DepositForm />
            </div>
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\error.tsx =====

'use client';

import { useEffect } from 'react';
import { Button } from '@/shared/ui/button';

export default function Error({ error, reset }: { error: Error; reset: () => void }) {
    useEffect(() => {
        console.error(error);
    }, [error]);

    return (
        <div>
            <h1>–û—à–∏–±–∫–∞</h1>
            <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.</p>
            <Button onClick={() => reset()} className="" label="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" />
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\layout.tsx =====

// app/layout.tsx
import type { Metadata } from 'next';
import { Lato } from 'next/font/google';
import '@/shared/styles/global.scss';
import { AppProviders } from '../shared/lib/providers';
import styles from './layout.module.scss';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç Lato
const latoSans = Lato({
    weight: ['100', '300', '400', '700', '900'],
    variable: '--font-lato',
    subsets: ['latin', 'latin-ext'],
    display: 'swap',
});

export const metadata: Metadata = {
    title: {
        default: 'Robomine capital',
        template: '%s | Robomine capital',
    },
    description: '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–∞ –º–∞–π–Ω–∏–Ω–≥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
    metadataBase: new URL(process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'),
};

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="ru" suppressHydrationWarning>
            <head>
                <script src="https://telegram.org/js/telegram-web-app.js" async></script>
            </head>
            <body className={`${styles.layout} ${latoSans.variable} `}>
                <main className={styles.content}>
                    <AppProviders>{children}</AppProviders>
                </main>
            </body>
        </html>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\loading.tsx =====

// @/app/loading.tsx
import styles from './Home.module.scss';

export default function Loading() {
    return <div className={styles.loading}></div>;
}


===== C:\Users\USER\Projects\robomine-capital\src\app\not-found.tsx =====

// @/app/not-found.tsx

export default function NotFound() {
    return (
        <div>
            <h1 className="not-found__title">404</h1>
            <p className="not-found__description">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\page.tsx =====

'use client';

// app/page.tsx
import { useEffect, useState } from 'react';
// <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ö—É–∫–∏
import { MachineWithState, getAllMachines } from '@/entities/machine';
import { MachineList } from '@/features/mining/ui/MachineList';
import { ActionButtons } from '@/widgets/action-buttons';
import { Header } from '@/widgets/header/ui/Header';
import { BuyMachineLink } from '@/widgets/machine-card';
import styles from './Home.module.scss';

export default function HomePage() {
    const [userMachines, setUserMachines] = useState<MachineWithState[]>([]);

    useEffect(() => {
        const fetchMachines = async () => {
            try {
                const allMachines = await getAllMachines();
                // –§–∏–ª—å—Ç—Ä—É–µ–º: —Ç–æ–ª—å–∫–æ –∫—É–ø–ª–µ–Ω–Ω—ã–µ/–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—à–∏–Ω—ã
                const purchasedMachines = allMachines.filter(({ state_car }) => {
                    const status = state_car?.status ?? 'not_purchased';
                    return status !== 'not_purchased';
                });
                setUserMachines(purchasedMachines);
            } catch (err) {
                console.error(
                    '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—à–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–ª–∏–µ–Ω—Ç):',
                    err
                );
            }
        };

        fetchMachines();
    }, []);

    return (
        <div className={styles.homePage}>
            <Header />
            <ActionButtons />

            {userMachines.length > 0 ? (
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
                <div className={styles.machinesContainer}>
                    <MachineList
                        machines={userMachines}
                        filterType="purchased"
                        showBuyMoreCard={true}
                    />
                </div>
            ) : (
                // –ï—Å–ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
                <BuyMachineLink />
            )}
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\referral\page.tsx =====

'use client';

// src/app/referral/page.tsx
import { useEffect, useState } from 'react';
import { UserReferralData, getUserReferrals } from '@/entities/user';
import { useUser } from '@/entities/user/model/UserContext';
import { BackButton, Button } from '@/shared/ui';
import { ReferralBalance } from '@/widgets/referral-balance';
import { ReferralLink } from '@/widgets/referral-link';
import { ReferralList } from '@/widgets/referral-list';
import styles from './Referral.module.scss';

export default function ReferralPage() {
    const { user } = useUser();
    const [referralsData, setReferralsData] = useState<UserReferralData | null>(null);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    useEffect(() => {
        if (user && !referralsData) {
            const fetchData = async () => {
                try {
                    const referralsDataResult = await getUserReferrals();
                    setReferralsData(referralsDataResult);
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∫–ª–∏–µ–Ω—Ç):', err);
                }
            };
            fetchData();
        }
    }, [user, referralsData]);

    const handleInvite = () => {
        const referralLink = `https://t.me/RoboMine_CapitalBot?start=${user?.telegram_id}`;
        const message = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ RoboMine Capital –∏ –Ω–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å! üëâ ${referralLink}`;

        const telegramShareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(message)}`;
        window.open(telegramShareUrl, '_blank');
    };

    return (
        <div className={styles.referralPage}>
            <BackButton />
            <h1 className={styles.title}>–†–µ—Ñ–µ—Ä–∞–ª–ª—ã</h1>

            <span className={styles.referralText}>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —É–∂–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –≤–∞—Å:</span>
            <ReferralBalance />

            <span className={styles.referralText}>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</span>
            <ReferralLink telegramId={user?.telegram_id} />
            <Button className={styles.button} onClick={handleInvite}>
                –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            </Button>
            {referralsData && <ReferralList referrals={referralsData.referrals} />}
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\shop\page.tsx =====

// @/app/shop/page.tsx
import { MachineList } from '@/features/mining';
import { BackButton } from '@/shared/ui';
import styles from './Shop.module.scss';

export default function ShopPage() {
    return (
        <div className={styles.shopPage}>
            <BackButton />
            <h1 className={styles.title}>–ú–∞–π–Ω–∏–Ω–≥ –º–∞—à–∏–Ω—ã</h1>
            <MachineList filterType="all" />
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\app\withdraw\page.tsx =====

// @/app/withdraw/page.tsx
import { WithdrawForm } from '@/features/withdraw';
import { BackButton } from '@/shared/ui';
import { Header } from '@/widgets/header';
import styles from './Withdraw.module.scss';

export default function WithdrawPage() {
    return (
        <div className={styles.withdrawPage}>
            <BackButton />
            <h1 className={styles.title}>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</h1>

            <Header />

            <div className={styles.formContainer}>
                <span>–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞</span>
                <WithdrawForm />
            </div>
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\entities\deposit\api\deposit.api.ts =====

// entities/deposit/api/deposit.api.ts
import { api } from '@/shared/api';
import { DepositDto } from '../model/types';

/**
 * –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * @param asset - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "TON", "BTC")
 * @param amount - –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns –î–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ
 */
export const createDepositInvoice = async (asset: string, amount: string): Promise<DepositDto> => {
    const response = await api.post<DepositDto>('/deposits/create', {
        asset,
        amount,
    });

    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */
export const getDepositHistory = async (): Promise<DepositDto[]> => {
    const response = await api.get<DepositDto[]>('/deposits/history');

    return response.data;
};


===== C:\Users\USER\Projects\robomine-capital\src\entities\deposit\api\index.ts =====

export {} from './';
export { createDepositInvoice, getDepositHistory } from './deposit.api';


===== C:\Users\USER\Projects\robomine-capital\src\entities\deposit\index.ts =====

export * from './api';
export * from './model';
export * from './ui';


===== C:\Users\USER\Projects\robomine-capital\src\entities\deposit\model\index.ts =====

export * from './';
export type { DepositDto } from './types';


===== C:\Users\USER\Projects\robomine-capital\src\entities\deposit\model\types.ts =====

// entities/deposit/model/types.ts
export interface DepositDto {
    id: number;
    telegram_id: number;
    invoice_id: number;
    hash: string;
    amount: number;
    status: 'pending' | 'completed' | 'failed';
    created_at: string; // ISO string
    updated_at: string; // ISO string
}


===== C:\Users\USER\Projects\robomine-capital\src\entities\deposit\ui\index.ts =====

export {} from '.';


===== C:\Users\USER\Projects\robomine-capital\src\entities\machine\api\index.ts =====

export {
    activateMachine,
    getAllMachines,
    getMachineById,
    purchaseMachine,
    transitionMachine,
} from './machine.api';


===== C:\Users\USER\Projects\robomine-capital\src\entities\machine\api\machine.api.ts =====

// entities/machine/api/machine.api.ts
import { api } from '@/shared/api';
import {
    ActivateMachineDto,
    MachineAttributes,
    MachineWithState,
    PurchaseMachineDto,
    TransitionMachineDto,
} from '../model/types';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getAllMachines = async (): Promise<MachineWithState[]> => {
    const response = await api.get<MachineWithState[]>('/cars/');
    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∞—à–∏–Ω—É –ø–æ ID
 */
export const getMachineById = async (id: number): Promise<MachineAttributes> => {
    const response = await api.get<MachineAttributes>(`/cars/${id}`);
    return response.data;
};

/**
 * –ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É
 */
export const purchaseMachine = async (data: PurchaseMachineDto): Promise<boolean> => {
    const response = await api.post<boolean>('/cars/purchase', data);
    return response.data;
};

/**
 * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É
 */
export const activateMachine = async (data: ActivateMachineDto): Promise<{ message: string }> => {
    const response = await api.put<{ message: string }>('/cars/activate', data);
    return response.data;
};

/**
 * –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–∞—à–∏–Ω—É –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ waiting_for_reward –≤ awaiting)
 */
export const transitionMachine = async (
    data: TransitionMachineDto
): Promise<{ message: string }> => {
    const response = await api.put<{ message: string }>('/cars/take', data);
    return response.data;
};


===== C:\Users\USER\Projects\robomine-capital\src\entities\machine\index.ts =====

export * from './api';
export * from './model';
export * from './ui';


===== C:\Users\USER\Projects\robomine-capital\src\entities\machine\model\index.ts =====

export type {
    ActivateMachineDto,
    CreateMachineDto,
    MachineAttributes,
    MachineCreationAttributes,
    MachineToUserAttributes,
    MachineWithState,
    PurchaseMachineDto,
    TransitionMachineDto,
} from './types';


===== C:\Users\USER\Projects\robomine-capital\src\entities\machine\model\types.ts =====

// entities/machine/model/types.ts

// --- DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω—ã ---
export interface CreateMachineDto {
    name: string;
    price: number;
    status: boolean;
    lifespan: number; // —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö
    daily_replenishment: number; // –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    daily_replenishment_tokens: number; // –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    profit_percentage: number; // –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
    image?: string; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

// --- –ê—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω—ã (–∏–∑ –ë–î) ---
export interface MachineAttributes {
    id: number;
    name: string;
    price: number;
    status: boolean;
    lifespan: number;
    daily_replenishment: number;
    daily_replenishment_tokens: number;
    profit_percentage: number;
    image: string;
    created_at: Date;
    updated_at: Date;
}

type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

// --- –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–±–µ–∑ id –∏ timestamps) ---
export type MachineCreationAttributes = Optional<
    MachineAttributes,
    | 'id'
    | 'daily_replenishment_tokens'
    | 'profit_percentage'
    | 'image'
    | 'created_at'
    | 'updated_at'
>;

// --- DTO –¥–ª—è —Å–≤—è–∑–∏ –º–∞—à–∏–Ω–∞-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
export interface MachineToUserAttributes {
    id: number;
    telegram_id: number;
    machine_id: number;
    remaining_uses: number;
    status: 'not_purchased' | 'awaiting' | 'in_progress' | 'waiting_for_reward' | 'completed';
    last_updated: number;
    created_at: Date;
    updated_at: Date;
}

export interface PurchaseMachineDto {
    car_id: number;
}

export interface ActivateMachineDto {
    car_id: number;
}

export interface TransitionMachineDto {
    car_to_user_id: number;
}

// --- –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ getAllMachines ---
export interface MachineWithState {
    car: MachineAttributes;
    state_car: {
        id: number | null;
        telegram_id: number;
        car_id: number | null;
        remaining_uses: number;
        status: MachineToUserAttributes['status'];
        last_updated: number;
    };
}


===== C:\Users\USER\Projects\robomine-capital\src\entities\machine\ui\index.ts =====

export {} from '.';


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\api\index.ts =====

export {
    banUser,
    checkUserExists,
    createUser,
    getAllUsers,
    getMe,
    getUserReferrals,
    replenishUserBalance,
    unbanUser,
} from './user.api';


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\api\user.api.ts =====

// entities/user/api/user.api.ts
import { api } from '@/shared/api';
import {
    BanUserDto,
    CreateUserDto,
    ReplenishDto,
    UserAttributes,
    UserReferralData,
} from '../model/types';

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ telegram_id
 */
// entities/user/api/user.api.ts
/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ telegram_id
 */
export const checkUserExists = async (telegram_id: number): Promise<boolean> => {
    try {
        const response = await api.get<boolean>(`/users/check/${telegram_id}`);
        return response.data;
    } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ Axios –æ—à–∏–±–∫–æ–π —Å response
        if (error && typeof error === 'object' && 'response' in error) {
            const axiosError = error as { response?: { status: number } };
            if (axiosError.response?.status === 404) {
                return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        console.error('Error checking user existence:', error);
        throw error;
    }
};

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const createUser = async (userData: CreateUserDto): Promise<UserAttributes> => {
    const response = await api.post<UserAttributes>('/users/create', userData);
    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getMe = async (): Promise<UserAttributes> => {
    const response = await api.get<UserAttributes>('/users/getMe');
    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserReferrals = async (): Promise<UserReferralData> => {
    const response = await api.get<UserReferralData>('/users/get-referrals');
    return response.data;
};

/**
 * –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const replenishUserBalance = async (data: ReplenishDto): Promise<UserAttributes> => {
    const response = await api.put<UserAttributes>('/users/replenish', data);
    return response.data;
};

/**
 * –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const banUser = async (user_id: number, data: BanUserDto): Promise<UserAttributes> => {
    const response = await api.put<UserAttributes>(`/users/ban/${user_id}`, data);
    return response.data;
};

/**
 * –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const unbanUser = async (user_id: number): Promise<UserAttributes> => {
    const response = await api.put<UserAttributes>(`/users/unban/${user_id}`);
    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const getAllUsers = async (): Promise<UserAttributes[]> => {
    const response = await api.get<UserAttributes[]>('/users/admin/get-all-users');
    return response.data;
};


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\index.ts =====

export * from './api';
export * from './model';
export * from './ui';


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\model\UserContext.tsx =====

'use client';

// src/entities/user/model/UserContext.tsx (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)
import React, {
    ReactNode,
    createContext,
    useCallback,
    useContext,
    useEffect,
    useState,
} from 'react';
import { getMe } from '@/entities/user/api/user.api';
import { UserAttributes } from '@/entities/user/model/types';
import { useTelegramWebApp } from '@/shared/lib/hooks/useTelegramWebApp';

interface UserContextType {
    user: UserAttributes | null;
    isLoading: boolean;
    error: string | null;
    refreshUser: () => Promise<void>;
    refreshUserBalance: () => Promise<void>;
    updateUserLocally: (updates: Partial<UserAttributes>) => void;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const UserProvider = ({ children }: { children: ReactNode }) => {
    const [user, setUser] = useState<UserAttributes | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { tgUser, isLoading: isTgLoading } = useTelegramWebApp();

    const fetchUserData = useCallback(async () => {
        // <-- useCallback –¥–ª—è fetchUserData
        if (!tgUser?.id) return;
        try {
            setIsLoading(true);
            setError(null);
            const userData = await getMe();
            setUser(userData);
            if (typeof window !== 'undefined') {
                window.telegramUser = userData;
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } finally {
            setIsLoading(false);
        }
    }, [tgUser?.id]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç tgUser.id

    const refreshUserBalance = useCallback(async () => {
        // <-- useCallback
        if (!user) return;
        try {
            const updatedUser = await getMe();
            setUser(updatedUser); // –ò–ª–∏ —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
        }
    }, [user]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç user

    const refreshUser = useCallback(async () => {
        // <-- useCallback
        await fetchUserData();
    }, [fetchUserData]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç fetchUserData

    const updateUserLocally = useCallback((updates: Partial<UserAttributes>) => {
        // <-- useCallback
        setUser((prevUser) => {
            if (!prevUser) return null;
            return { ...prevUser, ...updates };
        });
    }, []); // –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ setUser

    useEffect(() => {
        if (!isTgLoading && tgUser?.id) {
            fetchUserData();
        } else if (!isTgLoading && !tgUser?.id) {
            setIsLoading(false);
        }
    }, [tgUser, isTgLoading, fetchUserData]); // –î–æ–±–∞–≤–ª–µ–Ω fetchUserData –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // --- –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: useCallback –¥–ª—è –≤—Å–µ–≥–æ value ---
    const contextValue = React.useMemo(
        () => ({
            // <-- useMemo –¥–ª—è value
            user,
            isLoading,
            error,
            refreshUser,
            refreshUserBalance,
            updateUserLocally,
        }),
        [user, isLoading, error, refreshUser, refreshUserBalance, updateUserLocally]
    );
    // --- –ö–û–ù–ï–¶ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ß–ê–°–¢–ò ---

    return (
        <UserContext.Provider value={contextValue}>
            {' '}
            {/* <-- –ü–µ—Ä–µ–¥–∞–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
            {children}
        </UserContext.Provider>
    );
};

export const useUser = (): UserContextType => {
    const context = useContext(UserContext);
    if (context === undefined) {
        throw new Error('useUser must be used within a UserProvider');
    }
    return context;
};


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\model\index.ts =====

export type {
    BanUserDto,
    CreateUserDto,
    ReplenishDto,
    UserAttributes,
    UserCreationAttributes,
    UserReferralData,
} from './types';

export { UserProvider, useUser } from './UserContext';
export { useUserInit } from './useUserInit';
export {} from './';


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\model\types.ts =====

// entities/user/model/types.ts
type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

// --- –ê—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ –ë–î) ---
export interface UserAttributes {
    id: number;
    telegram_id: number;
    ref_id: number;
    role: string;
    username: string;
    balance: number;
    tokens: number;
    ref_balance: number;
    referrer_profit: number;
    blago_status: boolean;
    level: number;
    subscription: boolean;
    is_banned: boolean;
    ban_until: Date;
    created_at: Date;
    updated_at: Date;
}

// --- –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–±–µ–∑ id –∏ timestamps) ---
export type UserCreationAttributes = Optional<
    UserAttributes,
    | 'id'
    | 'role'
    | 'username'
    | 'balance'
    | 'tokens'
    | 'ref_balance'
    | 'referrer_profit'
    | 'blago_status'
    | 'level'
    | 'subscription'
    | 'is_banned'
    | 'ban_until'
    | 'created_at'
    | 'updated_at'
>;

// --- DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
export interface CreateUserDto {
    telegram_id: number;
    username: string;
    ref_id?: number;
    tokens?: number;
}

// --- DTO –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
export interface ReplenishDto {
    telegram_id: number;
    amount: number;
}

// --- DTO –¥–ª—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞ ---
export interface BanUserDto {
    date?: string; // –§–æ—Ä–º–∞—Ç: "HH:mm DD.MM.YYYY"
}

// --- –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ getUserReferrals ---
export interface UserReferralData {
    referrals: Omit<UserAttributes, 'ban_until' | 'created_at' | 'updated_at'>[];
    referralCount: number;
}


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\model\useUserInit.ts =====

'use client';

// entities/user/model/useUserInit.ts
import { useEffect, useState } from 'react';
import { AxiosError } from 'axios';
import { checkUserExists, createUser, getMe } from '@/entities/user/api/user.api';
import { CreateUserDto, UserAttributes } from '@/entities/user/model/types';
import { useTelegramWebApp } from '@/shared/lib/hooks/useTelegramWebApp';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Window –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
declare global {
    interface Window {
        telegramUser?: UserAttributes;
    }
}

export const useUserInit = () => {
    const [user, setUser] = useState<UserAttributes | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { tgUser, isLoading: isTgLoading } = useTelegramWebApp();

    useEffect(() => {
        const initializeUser = async () => {
            try {
                if (isTgLoading) {
                    return;
                }
                if (!tgUser?.id) {
                    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
                    setIsLoading(false);
                    return;
                }

                setIsLoading(true);
                setError(null);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const exists = await checkUserExists(tgUser.id);

                if (!exists) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const userData: CreateUserDto = {
                        telegram_id: tgUser.id,
                        username: tgUser.username || `user_${tgUser.id}`,
                    };
                    try {
                        const newUser = await createUser(userData);
                        setUser(newUser);
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        if (typeof window !== 'undefined') {
                            window.telegramUser = newUser;
                        }
                    } catch (createError: unknown) {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 409 Conflict - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if (
                            createError instanceof AxiosError &&
                            createError.response?.status === 409
                        ) {
                            const userData = await getMe();
                            setUser(userData);
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                            if (typeof window !== 'undefined') {
                                window.telegramUser = userData;
                            }
                        } else {
                            // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                            throw createError;
                        }
                    }
                } else {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    const userData = await getMe();
                    setUser(userData);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    if (typeof window !== 'undefined') {
                        window.telegramUser = userData;
                    }
                }
            } catch (err: unknown) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                if (err instanceof Error) {
                    setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${err.message}`);
                } else {
                    setError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                }
            } finally {
                setIsLoading(false);
            }
        };

        initializeUser();
    }, [tgUser, isTgLoading]);

    return { user, isLoading, error };
};


===== C:\Users\USER\Projects\robomine-capital\src\entities\user\ui\index.ts =====

export {} from './';


===== C:\Users\USER\Projects\robomine-capital\src\entities\withdrawal\api\index.ts =====

export {
    confirmWithdrawal,
    getPendingWithdrawals,
    getWithdrawalRestriction,
    rejectWithdrawal,
    transfer,
} from './withdrawal.api';


===== C:\Users\USER\Projects\robomine-capital\src\entities\withdrawal\api\withdrawal.api.ts =====

// entities/withdrawal/api/withdrawal.api.ts
import { api } from '@/shared/api';
import {
    CreateWithdrawalDto,
    PendingWithdrawal,
    TransferResult,
    WithdrawalRestriction,
} from '../model/types';

/**
 * –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 */
export const transfer = async (
    data: Omit<CreateWithdrawalDto, 'spend_id'>
): Promise<TransferResult> => {
    const response = await api.post<TransferResult>('/withdrawal/transfer', data);
    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 */
export const getWithdrawalRestriction = async (): Promise<WithdrawalRestriction> => {
    const response = await api.get<WithdrawalRestriction>('/withdrawal/restriction');
    return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const getPendingWithdrawals = async (): Promise<PendingWithdrawal[]> => {
    const response = await api.get<PendingWithdrawal[]>('/withdrawal/admin/pending');
    return response.data;
};

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const confirmWithdrawal = async (id: number): Promise<TransferResult> => {
    const response = await api.post<TransferResult>(`/withdrawal/admin/confirm/${id}`);
    return response.data;
};

/**
 * –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
export const rejectWithdrawal = async (id: number): Promise<TransferResult> => {
    const response = await api.post<TransferResult>(`/withdrawal/admin/reject/${id}`);
    return response.data;
};


===== C:\Users\USER\Projects\robomine-capital\src\entities\withdrawal\index.ts =====

export * from './api';
export * from './model';
export * from './ui';


===== C:\Users\USER\Projects\robomine-capital\src\entities\withdrawal\model\index.ts =====

export type {
    CreateWithdrawalDto,
    PendingWithdrawal,
    ProcessWithdrawalDto,
    TransferResult,
    WithdrawalAttributes,
    WithdrawalCreationAttributes,
    WithdrawalRestriction,
} from './types';


===== C:\Users\USER\Projects\robomine-capital\src\entities\withdrawal\model\types.ts =====

// entities/withdrawal/model/types.ts
type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

// --- –ê—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏ –≤—ã–≤–æ–¥–∞ (–∏–∑ –ë–î) ---
export interface WithdrawalAttributes {
    id: number;
    telegram_id: number;
    hash: string;
    amount: number;
    status: 'pending' | 'pending_confirmation' | 'completed' | 'rejected';
    created_at: Date;
    updated_at: Date;
}

// --- –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–±–µ–∑ id –∏ timestamps) ---
export type WithdrawalCreationAttributes = Optional<
    WithdrawalAttributes,
    'id' | 'created_at' | 'updated_at'
>;

// --- DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ ---
export interface CreateWithdrawalDto {
    amount: string; // –°—É–º–º–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∫–∞–∫ –≤ –±—ç–∫–µ–Ω–¥–µ
    spend_id?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±—ç–∫–µ–Ω–¥–æ–º –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    comment?: string;
    disable_send_notification?: boolean;
}

// --- DTO –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ (–∞–¥–º–∏–Ω) ---
export interface ProcessWithdrawalDto {
    id: number;
}

// --- –¢–∏–ø –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –≤—ã–≤–æ–¥ ---
export interface WithdrawalRestriction {
    message: string;
    availableDays?: string[]; // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
}

// --- –¢–∏–ø –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤ (–∞–¥–º–∏–Ω) ---
export type PendingWithdrawal = WithdrawalAttributes;

// --- –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ transfer (–æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è) ---
export type TransferResult = WithdrawalAttributes;


===== C:\Users\USER\Projects\robomine-capital\src\entities\withdrawal\ui\index.ts =====

export {} from '.';


===== C:\Users\USER\Projects\robomine-capital\src\features\claim-animation\ui\ClaimAnimation.tsx =====

// 'use client';

// // src/features/claim-animation/ui/ClaimAnimation.tsx
// import { useEffect, useState } from 'react';
// import moleCoin from '@/assets/icons/mole-coin.webp';
// import tonCoin from '@/assets/icons/ton-coin.webp';
// import './ClaimAnimation.scss';

// const getRandomCoin = () => (Math.random() > 0.5 ? tonCoin : moleCoin);

// export const ClaimAnimation = () => {
//     const [shouldAnimateCoins, setShouldAnimateCoins] = useState(false);
//     const [coinType, setcoinType] = useState<string[]>([]);

//     useEffect(() => {
//         setcoinType([
//             getRandomCoin(),
//             getRandomCoin(),
//             getRandomCoin(),
//             getRandomCoin(),
//             getRandomCoin(),
//         ]);
//         setShouldAnimateCoins(true);
//     }, []);

//     return (
//         <div className="ClaimAnimation">
//             <img className={`Coin Coin_Central`} src={tonCoin} alt="coin" />
//             <img
//                 className={`Coin Coin_TopLeft ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[0]}
//                 alt="coin"
//             />
//             <img
//                 className={`Coin Coin_TopRight ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[1]}
//                 alt="coin"
//             />
//             <img
//                 className={`Coin Coin_BottomRight ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[2]}
//                 alt="coin"
//             />
//             <img
//                 className={`Coin Coin_BottomLeft ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[3]}
//                 alt="coin"
//             />
//         </div>
//     );
// };


===== C:\Users\USER\Projects\robomine-capital\src\features\currency-converter\index.ts =====

export * from './model';


===== C:\Users\USER\Projects\robomine-capital\src\features\currency-converter\model\converter.ts =====

// src/features/currency-converter/model/converter.ts
import { ConvertCurrencyParams } from './types';

export const convertCurrency = ({ amount, from, to, rates }: ConvertCurrencyParams): number => {
    // 1. –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –≤ —Å–∞–º—É —Å–µ–±—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É
    if (from === to) {
        return amount;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∫—É—Ä—Å—ã –¥–ª—è –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç
    //    –∏ –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Å–∞–º –æ–±—ä–µ–∫—Ç rates
    if (!rates || rates[from] === undefined || rates[to] === undefined) {
        console.warn(`–ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã ${from} –∏–ª–∏ ${to} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö rates.`, {
            rates,
            from,
            to,
        });
        // –ú–æ–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å 0
        return 0;
        // throw new Error(`–ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã ${from} –∏–ª–∏ ${to} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    // 3. --- –õ–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ---
    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: `rates` —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã RUB.
    // `rates['USDT']` –æ–∑–Ω–∞—á–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ RUB —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ 1 –µ–¥–∏–Ω–∏—Ü–µ USDT.
    // –ù–∞–ø—Ä–∏–º–µ—Ä: rates = { RUB: 1, USDT: 0.011 }
    // –≠—Ç–æ –∑–Ω–∞—á–∏—Ç: 1 RUB = 0.011 USDT, –∏–ª–∏ 1 USDT = 1 / 0.011 ‚âà 90.91 RUB

    // –ß—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å `amount` –∏–∑ `from` –≤ `to`:
    // a. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º, —Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã (RUB) —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ `amount` –≤–∞–ª—é—Ç—ã `from`.
    //    amountInRub = amount * (1 / rates[from])
    //    (–ü–æ—Ç–æ–º—É —á—Ç–æ rates[from] –≥–æ–≤–æ—Ä–∏—Ç, —Å–∫–æ–ª—å–∫–æ RUB –≤ 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã from)
    //    –ü—Ä–∏–º–µ—Ä: amount = 10 USDT, rates['USDT'] = 0.011
    //    amountInRub = 10 * (1 / 0.011) = 10 * 90.91 ‚âà 909.09 RUB

    // b. –ó–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç—É —Å—É–º–º—É –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã (RUB) –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É `to`.
    //    result = amountInRub * rates[to]
    //    (–ü–æ—Ç–æ–º—É —á—Ç–æ rates[to] –≥–æ–≤–æ—Ä–∏—Ç, —Å–∫–æ–ª—å–∫–æ RUB —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã to)
    //    –ü—Ä–∏–º–µ—Ä: amountInRub = 909.09 RUB, rates['RUB'] = 1
    //    result = 909.09 * 1 = 909.09 RUB (–µ—Å–ª–∏ to = 'RUB')
    //    –ï—Å–ª–∏ –±—ã to = 'EUR' –∏ rates['EUR'] = 0.0095 (1 RUB = 0.0095 EUR)
    //    result = 909.09 * 0.0095 ‚âà 8.64 EUR

    // –û–±—ä–µ–¥–∏–Ω—è—è —à–∞–≥–∏ a –∏ b:
    // result = (amount * (1 / rates[from])) * rates[to]
    // result = (amount * rates[to]) / rates[from]

    const result = (amount * rates[to]) / rates[from];

    // 4. –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
    // –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —á–∞—Å—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 2-8 –∑–Ω–∞–∫–æ–≤.
    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    // Math.round(result * 1_000_000) / 1_000_000 —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—é –¥–æ 6 –∑–Ω–∞–∫–æ–≤.
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: parseFloat(result.toFixed(6))
    return Math.round(result * 1_000_000) / 1_000_000;
    // –ò–ª–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ–≥–¥–∞ 3 –∑–Ω–∞–∫–∞ (–∫–∞–∫ –≤ Balance):
    // return parseFloat(result.toFixed(3));
};


===== C:\Users\USER\Projects\robomine-capital\src\features\currency-converter\model\index.ts =====

export { convertCurrency } from './converter';
export { useCurrencyConverter } from './useCurrencyConverter';
export {} from './';


===== C:\Users\USER\Projects\robomine-capital\src\features\currency-converter\model\types.ts =====

// @/features/currency-converter/model/types.ts
export interface CurrencyRates {
    [key: string]: number;
}

export interface ConvertCurrencyParams {
    amount: number;
    from: string;
    to: string;
    rates: CurrencyRates;
}


===== C:\Users\USER\Projects\robomine-capital\src\features\currency-converter\model\useCurrencyConverter.tsx =====

'use client';

// src/features/currency-converter/model/hooks.ts
import { useEffect, useState } from 'react';
import { CurrencyRates } from './types';

export const useCurrencyConverter = () => {
    const [rates, setRates] = useState<CurrencyRates | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchRates = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(
                    'https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub'
                );

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                const usdtToRubRate = data?.tether?.rub;

                if (typeof usdtToRubRate === 'number' && usdtToRubRate > 0) {
                    const fetchedRates: CurrencyRates = {
                        RUB: 1,
                        USDT: 1 / usdtToRubRate,
                    };
                    setRates(fetchedRates);
                } else {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å USDT/RUB.');
                }
            } catch (err) {
                if (err instanceof Error) {
                    console.error('–û—à–∏–±–∫–∞ –≤ useCurrencyConverter:', err);
                    setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞ USDT/RUB.');
                } else {
                    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
                    setError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞.');
                }
            } finally {
                setLoading(false);
            }
        };

        fetchRates();
    }, []);

    return { rates, loading, error };
};


===== C:\Users\USER\Projects\robomine-capital\src\features\deposit\index.ts =====

export { DepositForm } from './ui/DepositForm';


===== C:\Users\USER\Projects\robomine-capital\src\features\deposit\model\types.ts =====



===== C:\Users\USER\Projects\robomine-capital\src\features\deposit\ui\DepositForm.tsx =====

'use client';

// @/features/deposit/ui/DepositForm.tsx
import { useEffect, useState } from 'react';
import { DepositDto, createDepositInvoice } from '@/entities/deposit';
import { convertCurrency, useCurrencyConverter } from '@/features/currency-converter';
import { Button, Input } from '@/shared/ui';
import styles from './DepositForm.module.scss';

export const DepositForm = () => {
    const [rubAmount, setRubAmount] = useState('');
    const [usdtAmount, setUsdtAmount] = useState('');
    const [lastChanged, setLastChanged] = useState<'RUB' | 'USDT'>('USDT');
    const { rates } = useCurrencyConverter();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDT <-> RUB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    useEffect(() => {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ, –æ—á–∏—â–∞–µ–º –∏ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ
        if (lastChanged === 'RUB') {
            if (!rubAmount) {
                // –ï—Å–ª–∏ RUB –æ—á–∏—â–µ–Ω, –æ—á–∏—â–∞–µ–º USDT
                setUsdtAmount('');
            } else if (!isNaN(Number(rubAmount)) && rates) {
                // <-- –ü—Ä–æ–≤–µ—Ä—è–µ–º rates –Ω–∞ null
                // –û–±–Ω–æ–≤–ª—è–µ–º USDT –Ω–∞ –æ—Å–Ω–æ–≤–µ RUB
                const converted = convertCurrency({
                    amount: Number(rubAmount),
                    from: 'RUB',
                    to: 'USDT',
                    rates,
                });
                setUsdtAmount(converted.toString());
            }
        } else if (lastChanged === 'USDT') {
            if (!usdtAmount) {
                // –ï—Å–ª–∏ USDT –æ—á–∏—â–µ–Ω, –æ—á–∏—â–∞–µ–º RUB
                setRubAmount('');
            } else if (!isNaN(Number(usdtAmount)) && rates) {
                // <-- –ü—Ä–æ–≤–µ—Ä—è–µ–º rates –Ω–∞ null
                // –û–±–Ω–æ–≤–ª—è–µ–º RUB –Ω–∞ –æ—Å–Ω–æ–≤–µ USDT
                const converted = convertCurrency({
                    amount: Number(usdtAmount),
                    from: 'USDT',
                    to: 'RUB',
                    rates,
                });
                setRubAmount(converted.toString());
            }
        }
    }, [rubAmount, usdtAmount, lastChanged, rates]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    const isValidNumericInput = (value: string): boolean => {
        // –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏
        // ^\d*\.?\d*$ - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:
        // ^ - –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
        // \d* - –Ω–æ–ª—å –∏–ª–∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä
        // \.? - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        // \d* - –Ω–æ–ª—å –∏–ª–∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        // $ - –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
        return /^(\d+\.?\d*|\.\d+)?$/.test(value);
    };

    const handleRubChange = (value: string) => {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
        const sanitizedValue = value.replace(/[^0-9.]/g, '');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º
        if (isValidNumericInput(sanitizedValue)) {
            setRubAmount(sanitizedValue);
            setLastChanged('RUB');
            setError('');
        }
        // –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    const handleUsdtChange = (value: string) => {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
        const sanitizedValue = value.replace(/[^0-9.]/g, '');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º
        if (isValidNumericInput(sanitizedValue)) {
            setUsdtAmount(sanitizedValue);
            setLastChanged('USDT');
            setError('');
        }
        // –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–æ–ª—é USDT
        if (!usdtAmount || Number(usdtAmount) <= 0) {
            setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }

        const assetToUse = 'USDT'; // –ê–∫—Ç–∏–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        const amountToUse = usdtAmount; // –°—É–º–º–∞ –≤ USDT

        setIsLoading(true);
        setError('');

        try {
            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è ${assetToUse}:`, amountToUse);
            // –í—ã–∑—ã–≤–∞–µ–º API-—Ñ—É–Ω–∫—Ü–∏—é
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±—ç–∫–µ–Ω–¥ (DepositService) –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ pay_url
            const invoiceData: DepositDto & { pay_url?: string } = await createDepositInvoice(
                assetToUse,
                amountToUse
            );

            console.log('–î–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', invoiceData);

            let payUrl: string | null = null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pay_url –≤ –æ—Ç–≤–µ—Ç–µ
            if (invoiceData.pay_url) {
                payUrl = invoiceData.pay_url;
            } else if (invoiceData.invoice_id) {
                // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞!)
                // –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, —É—Ç–æ—á–Ω–∏—Ç–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CryptoBot
                payUrl = `https://t.me/CryptoBot?start=IV${invoiceData.invoice_id}`;
                console.warn(
                    'pay_url –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –±—ç–∫–µ–Ω–¥–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.'
                );
            }

            if (payUrl) {
                console.log('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:', payUrl);
                window.location.href = payUrl;
            } else {
                setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
                console.error(
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å pay_url –∏–∑ –æ—Ç–≤–µ—Ç–∞:',
                    invoiceData
                );
            }
        } catch (err: unknown) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', err);
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

            if (err instanceof Error) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
                const axiosLikeError = err as { response?: { data?: { error?: string } } };
                if (axiosLikeError.response?.data?.error) {
                    errorMessage = `–û—à–∏–±–∫–∞: ${axiosLikeError.response.data.error}`;
                } else {
                    errorMessage = `–û—à–∏–±–∫–∞: ${err.message}`;
                }
            }
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            setError(errorMessage);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
    const isButtonDisabled = !usdtAmount || Number(usdtAmount) <= 0;

    return (
        <form className={styles.depositForm} onSubmit={handleSubmit}>
            <Input
                type="tel"
                inputMode="decimal"
                pattern="[0-9]+([\.][0-9]+)?"
                variant="balance"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                value={rubAmount}
                onChange={(e) => handleRubChange(e.target.value)}
                currency="RUB"
            />

            <Input
                type="tel"
                inputMode="decimal"
                pattern="[0-9]+([\.][0-9]+)?"
                variant="balance"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                value={usdtAmount}
                onChange={(e) => handleUsdtChange(e.target.value)}
                currency="USDT"
                error={error}
            />

            <Button className={styles.button} type="submit" disabled={isButtonDisabled}>
                {isLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'}
            </Button>
        </form>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\features\mining\index.ts =====

// export * from './model';
export * from './ui';


===== C:\Users\USER\Projects\robomine-capital\src\features\mining\model\index.ts =====

export type { MachineListProps } from './types';


===== C:\Users\USER\Projects\robomine-capital\src\features\mining\model\types.ts =====

import { MachineWithState } from '@/entities/machine';

export interface MachineListProps {
    machines?: MachineWithState[];
    filterType: 'purchased' | 'not_purchased' | 'all';
    showBuyMoreCard?: boolean;
}


===== C:\Users\USER\Projects\robomine-capital\src\features\mining\ui\ClaimAnimation.tsx =====

// import { useEffect, useState } from 'react';
// import moleCoin from '@/assets/icons/mole-coin.webp';
// import tonCoin from '@/assets/icons/ton-coin.webp';
// import './ClaimAnimation.scss';

// const getRandomCoin = () => (Math.random() > 0.5 ? tonCoin : moleCoin);

// export const ClaimAnimation = () => {
//     const [shouldAnimateCoins, setShouldAnimateCoins] = useState(false);
//     const [coinType, setcoinType] = useState<string[]>([]);

//     useEffect(() => {
//         setcoinType([
//             getRandomCoin(),
//             getRandomCoin(),
//             getRandomCoin(),
//             getRandomCoin(),
//             getRandomCoin(),
//         ]);
//         setShouldAnimateCoins(true);
//     }, []);

//     return (
//         <div className="ClaimAnimation">
//             <img className={`Coin Coin_Central`} src={tonCoin} alt="coin" />
//             <img
//                 className={`Coin Coin_TopLeft ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[0]}
//                 alt="coin"
//             />
//             <img
//                 className={`Coin Coin_TopRight ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[1]}
//                 alt="coin"
//             />
//             <img
//                 className={`Coin Coin_BottomRight ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[2]}
//                 alt="coin"
//             />
//             <img
//                 className={`Coin Coin_BottomLeft ${shouldAnimateCoins ? 'animate' : ''}`}
//                 src={coinType[3]}
//                 alt="coin"
//             />
//         </div>
//     );
// };


===== C:\Users\USER\Projects\robomine-capital\src\features\mining\ui\MachineList.tsx =====

'use client';

// @/features/mining/ui/MachineList.tsx
import React from 'react';
import { useMachines } from '@/shared/lib/contexts/MachineContext';
import { BuyMoreCard, MachineCard } from '@/widgets/machine-card';
import { MachineListProps } from '../model';
import styles from './MachineList.module.scss';

export const MachineList = ({
    machines: propMachines,
    filterType = 'all',
    showBuyMoreCard = false,
}: MachineListProps) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ machines –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    const { machines: contextMachines } = useMachines();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–ª–∏ –º–∞—à–∏–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const machinesToUse = propMachines || contextMachines;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
    const filteredMachines = machinesToUse.filter(({ state_car }) => {
        const status = state_car?.status ?? 'not_purchased';
        switch (filterType) {
            case 'purchased':
                return status !== 'not_purchased';
            case 'not_purchased':
                return status === 'not_purchased';
            case 'all':
            default:
                return true;
        }
    });

    const shouldShowBuyMore = showBuyMoreCard && filterType === 'purchased';

    return (
        <div className={styles.machineList}>
            {shouldShowBuyMore && <BuyMoreCard />}
            {filteredMachines.map((machineWithState) => {
                const { car, state_car } = machineWithState;
                const status = state_car?.status ?? 'not_purchased';
                const isPurchased = status !== 'not_purchased';

                return (
                    <MachineCard
                        key={car.id}
                        image={car.image}
                        price={car.price}
                        status={status}
                        isPurchased={isPurchased}
                        machineData={machineWithState}
                    />
                );
            })}
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\features\mining\ui\index.ts =====

export { MachineList } from './MachineList';
export {} from './';
export {} from './';
export {} from './';
export {} from './';


===== C:\Users\USER\Projects\robomine-capital\src\features\timer\model\useTimer.ts =====

// 'use client';

// import { useEffect, useState } from 'react';

// export const useTimer = (targetTimestamp: number | null) => {
//     const [timeLeft, setTimeLeft] = useState(() => {
//         if (!targetTimestamp) return 0;
//         return Math.max(0, targetTimestamp - Math.floor(Date.now() / 1000));
//     });

//     useEffect(() => {
//         const interval = setInterval(() => {
//             setTimeLeft((prev) => (prev > 0 ? prev - 1 : 0));
//         }, 1000);
//         return () => clearInterval(interval);
//     }, []);

//     return timeLeft;
// };


===== C:\Users\USER\Projects\robomine-capital\src\features\withdraw\index.ts =====

export { WithdrawForm } from './ui/WithdrawForm';


===== C:\Users\USER\Projects\robomine-capital\src\features\withdraw\model\hooks.ts =====



===== C:\Users\USER\Projects\robomine-capital\src\features\withdraw\model\types.ts =====



===== C:\Users\USER\Projects\robomine-capital\src\features\withdraw\ui\WithdrawForm.tsx =====

'use client';

// @/features/deposit/ui/WithdrawForm.tsx
import { useEffect, useState } from 'react';
import { TransferResult, transfer } from '@/entities/withdrawal';
import { convertCurrency, useCurrencyConverter } from '@/features/currency-converter';
import { Button, Input } from '@/shared/ui';
import styles from './WithdrawForm.module.scss';

export const WithdrawForm = () => {
    const [rubAmount, setRubAmount] = useState('');
    const [usdtAmount, setUsdtAmount] = useState('');
    const [lastChanged, setLastChanged] = useState<'RUB' | 'USDT'>('RUB');
    const { rates } = useCurrencyConverter();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDT <-> RUB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    useEffect(() => {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ, –æ—á–∏—â–∞–µ–º –∏ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ
        if (lastChanged === 'RUB') {
            if (!rubAmount) {
                // –ï—Å–ª–∏ RUB –æ—á–∏—â–µ–Ω, –æ—á–∏—â–∞–µ–º USDT
                setUsdtAmount('');
            } else if (!isNaN(Number(rubAmount)) && rates) {
                // <-- –ü—Ä–æ–≤–µ—Ä—è–µ–º rates –Ω–∞ null
                // –û–±–Ω–æ–≤–ª—è–µ–º USDT –Ω–∞ –æ—Å–Ω–æ–≤–µ RUB
                const converted = convertCurrency({
                    amount: Number(rubAmount),
                    from: 'RUB',
                    to: 'USDT',
                    rates,
                });
                setUsdtAmount(converted.toString());
            }
        } else if (lastChanged === 'USDT') {
            if (!usdtAmount) {
                // –ï—Å–ª–∏ USDT –æ—á–∏—â–µ–Ω, –æ—á–∏—â–∞–µ–º RUB
                setRubAmount('');
            } else if (!isNaN(Number(usdtAmount)) && rates) {
                // <-- –ü—Ä–æ–≤–µ—Ä—è–µ–º rates –Ω–∞ null
                // –û–±–Ω–æ–≤–ª—è–µ–º RUB –Ω–∞ –æ—Å–Ω–æ–≤–µ USDT
                const converted = convertCurrency({
                    amount: Number(usdtAmount),
                    from: 'USDT',
                    to: 'RUB',
                    rates,
                });
                setRubAmount(converted.toString());
            }
        }
    }, [rubAmount, usdtAmount, lastChanged, rates]);

    const isValidNumericInput = (value: string): boolean => {
        // –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏
        // ^\d*\.?\d*$ - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:
        // ^ - –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
        // \d* - –Ω–æ–ª—å –∏–ª–∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä
        // \.? - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        // \d* - –Ω–æ–ª—å –∏–ª–∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        // $ - –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
        return /^(\d+\.?\d*|\.\d+)?$/.test(value);
    };

    const handleRubChange = (value: string) => {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
        const sanitizedValue = value.replace(/[^0-9.]/g, '');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º
        if (isValidNumericInput(sanitizedValue)) {
            setRubAmount(sanitizedValue);
            setLastChanged('RUB');
            setError('');
        }
        // –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    const handleUsdtChange = (value: string) => {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
        const sanitizedValue = value.replace(/[^0-9.]/g, '');
        if (isValidNumericInput(sanitizedValue)) {
            setUsdtAmount(sanitizedValue);
            setLastChanged('USDT');
            setError('');
        }
        // –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤ USDT –≤–≤–µ–¥–µ–Ω–∞ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞
        if (!usdtAmount || Number(usdtAmount) <= 0) {
            setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }

        const amountToWithdraw = parseFloat(usdtAmount);

        setIsLoading(true);
        setError('');

        try {
            console.log(`–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ ${amountToWithdraw} USDT (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç ~${rubAmount} RUB)`);

            const withdrawalResult: TransferResult = await transfer({ amount: usdtAmount });

            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∞:', withdrawalResult);

            if (withdrawalResult.status === 'completed') {
                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
                setRubAmount('');
                setUsdtAmount('');
            } else {
                // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –µ—Å–ª–∏ auto_approve=true, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π
            }
        } catch (err: unknown) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:', err);
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

            if (err instanceof Error) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
                const axiosLikeError = err as { response?: { data?: { error?: string } } };
                if (axiosLikeError.response?.data?.error) {
                    errorMessage = `–û—à–∏–±–∫–∞: ${axiosLikeError.response.data.error}`;
                } else {
                    errorMessage = `–û—à–∏–±–∫–∞: ${err.message}`;
                }
            }
            setError(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
    // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ USDT
    const isButtonDisabled =
        !usdtAmount || isNaN(parseFloat(usdtAmount)) || parseFloat(usdtAmount) <= 0 || isLoading;

    return (
        <form className={styles.withdrawForm} onSubmit={handleSubmit}>
            <Input
                type="tel"
                inputMode="decimal"
                pattern="[0-9]+([\.][0-9]+)?"
                variant="balance"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                value={rubAmount}
                onChange={(e) => handleRubChange(e.target.value)}
                currency="RUB"
                // error={error} // –û—à–∏–±–∫–∏ –æ–±—ã—á–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—é –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            />

            <Input
                type="tel"
                inputMode="decimal"
                pattern="[0-9]+([\.][0-9]+)?"
                variant="balance"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                value={usdtAmount}
                onChange={(e) => handleUsdtChange(e.target.value)}
                currency="USDT"
                error={error} // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ (USDT)
            />

            <Button className={styles.button} type="submit" disabled={isButtonDisabled}>
                {isLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–í—ã–≤–µ—Å—Ç–∏'}
            </Button>
        </form>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\api\axios.ts =====

// shared/api/axios.ts
import axios from 'axios';
import { API_URL } from '@/shared/config/env';

export const api = axios.create({
    baseURL: API_URL,
    withCredentials: true,
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
api.interceptors.request.use(
    (config) => {
        if (typeof window !== 'undefined') {
            try {
                // @ts-expect-error - —Å–≤–æ–π—Å—Ç–≤–æ initData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram WebApp, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏–ø–∞—Ö
                const initData = window.Telegram?.WebApp?.initData;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ initData –Ω–µ undefined –∏ –Ω–µ null
                if (initData !== undefined && initData !== null) {
                    config.headers['X-Telegram-Init-Data'] = initData;
                } else {
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    const urlParams = new URLSearchParams(window.location.search);
                    const tgWebAppData = urlParams.get('tgWebAppData');
                    if (tgWebAppData) {
                        config.headers['X-Telegram-Init-Data'] = tgWebAppData;
                    }
                }
            } catch (error) {
                console.error('Error processing Telegram WebApp data:', error);
            }
        }

        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);


===== C:\Users\USER\Projects\robomine-capital\src\shared\api\index.ts =====

export { api } from './axios';


===== C:\Users\USER\Projects\robomine-capital\src\shared\assets\icons\Arrow.tsx =====

// @/shared/assets/icons/Arrow.tsx
export const Arrow = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        width="27"
        height="18"
        viewBox="0 0 27 18"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
    >
        <path
            d="M12.9819 11.982L26.1602 11.982L26.1602 6.01816L12.9819 6.01814L12.9819 0.0387962L9.81912 0.0387946L0.857865 9.00005L9.81913 17.9613L12.9819 17.9613L12.9819 11.982Z"
            fill="currentColor"
        />
    </svg>
);


===== C:\Users\USER\Projects\robomine-capital\src\shared\assets\icons\Copy.tsx =====

// @/shared/assets/icons/Copy.tsx
export const Copy = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        width="30"
        height="30"
        viewBox="0 0 30 30"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
    >
        <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M6.40456 27.388C4.30997 27.388 2.61197 25.69 2.61197 23.5954V10.849C2.61197 8.7544 4.30997 7.05642 6.40456 7.05642H19.151C21.2456 7.05642 22.9436 8.7544 22.9436 10.849V23.5954C22.9436 25.69 21.2456 27.388 19.151 27.388H6.40456ZM0 23.5954C0 27.1326 2.86742 30 6.40456 30H19.151C22.6882 30 25.5556 27.1326 25.5556 23.5954V10.849C25.5556 7.31185 22.6882 4.44444 19.151 4.44444H6.40456C2.86742 4.44444 0 7.31184 0 10.849V23.5954Z"
            fill="currentColor"
        />
        <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M28.7232 20C29.4284 20 30 19.4284 30 18.7232V6.26146C30 2.80353 27.1967 0 23.7385 0H11.2768C10.5716 0 10 0.571648 10 1.27681C10 1.98197 10.5716 2.55362 11.2768 2.55362H23.7385C25.7863 2.55362 27.4464 4.2138 27.4464 6.26146V18.7232C27.4464 19.4284 28.018 20 28.7232 20Z"
            fill="currentColor"
        />
    </svg>
);


===== C:\Users\USER\Projects\robomine-capital\src\shared\assets\icons\Info.tsx =====

// @/shared/assets/icons/Arrow.tsx
export const Info = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        width="5"
        height="9"
        viewBox="0 0 5 9"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
    >
        <path
            d="M2.9427 0.917038C2.9427 1.42351 2.47047 1.83408 1.88784 1.83408C1.30529 1.83408 0.833008 1.42351 0.833008 0.917038C0.833008 0.41057 1.30529 0 1.88784 0C2.47047 0 2.9427 0.41057 2.9427 0.917038Z"
            fill="currentColor"
        />
        <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M0.703234 2.88623C0.314849 2.88623 0 3.15994 0 3.49759C0 3.83523 0.314849 4.10895 0.703234 4.10895H2.1097V8.38846C2.1097 8.7261 2.42455 8.99981 2.81294 8.99981C2.84901 8.99981 2.88446 8.99745 2.91908 8.9929H4.29676C4.68515 8.9929 5 8.71918 5 8.38154C5 8.04389 4.68515 7.77018 4.29676 7.77018H3.51617V3.49759C3.51617 3.15994 3.20132 2.88623 2.81294 2.88623H0.703234Z"
            fill="currentColor"
        />
    </svg>
);


===== C:\Users\USER\Projects\robomine-capital\src\shared\assets\icons\Invite.tsx =====

// @/shared/assets/icons/Invite.tsx

export const Invite = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
    >
        <path
            d="M12.8696 11.8261V10.7826H11.8261V11.8261H10.7826V12.8696H11.8261V13.913H12.8696V12.8696H13.9131V11.8261H12.8696Z"
            fill="currentColor"
        />
        <path d="M16 10.7826H14.9565V13.913H16V10.7826Z" fill="currentColor" />
        <path
            d="M13.9131 14.9565H10.7826V16H13.9131V14.9565Z"
            fill="currentColor"
        />
        <path
            d="M13.9131 8.69556H10.7826V9.73903H13.9131V8.69556Z"
            fill="currentColor"
        />
        <path
            d="M9.73913 3.13044V2.08697H8.69566V1.04347H7.65219V0H3.13044V1.04347H2.08697V2.08697H1.04347V3.13044H0V7.65219H1.04347V8.69565H2.08697V9.73912H3.13044V10.7826H1.04347V11.8261H0V13.913H9.73913V10.7826H7.65219V9.73912H8.69566V8.69565H9.73913V7.65219H10.7826V3.13044H9.73913Z"
            fill="currentColor"
        />
        <path
            d="M10.7826 9.73914H9.73911V10.7826H10.7826V9.73914Z"
            fill="currentColor"
        />
        <path
            d="M14.9565 9.73914H13.913V10.7826H14.9565V9.73914Z"
            fill="currentColor"
        />
        <path
            d="M14.9565 13.913H13.913V14.9564H14.9565V13.913Z"
            fill="currentColor"
        />
        <path
            d="M10.7826 13.913H9.73911V14.9564H10.7826V13.913Z"
            fill="currentColor"
        />
    </svg>
);


===== C:\Users\USER\Projects\robomine-capital\src\shared\assets\icons\index.ts =====

export { Arrow } from './Arrow';
export { Invite } from './Invite';
export { Info } from './Info';
export { Copy } from './Copy';


===== C:\Users\USER\Projects\robomine-capital\src\shared\config\env.ts =====

// shared/config/env.ts

export const API_URL = process.env.NEXT_PUBLIC_API_URL!;

===== C:\Users\USER\Projects\robomine-capital\src\shared\config\index.ts =====

export { API_URL } from './env';


===== C:\Users\USER\Projects\robomine-capital\src\shared\lib\contexts\MachineContext.tsx =====

'use client';

// @/shared/lib/contexts/MachineContext.tsx
import React, {
    ReactNode,
    createContext,
    useCallback,
    useContext,
    useEffect,
    useState,
} from 'react';
import { MachineWithState, getAllMachines } from '@/entities/machine';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –º–∞—à–∏–Ω—ã
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–º–∏, —á—Ç–æ –≤ MachineToUserAttributes
// –ï—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–¥–µ-—Ç–æ –∫–∞–∫ —Ç–∏–ø –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –ª—É—á—à–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ç—É–¥–∞
type MachineStatus =
    | 'not_purchased'
    | 'awaiting'
    | 'in_progress'
    | 'waiting_for_reward'
    | 'completed';

interface MachineContextType {
    machines: MachineWithState[];
    loading: boolean;
    error: string | null;
    refreshMachines: () => Promise<void>;
    // –û–±–Ω–æ–≤–ª—è–µ—Ç –ª—é–±—ã–µ –ø–æ–ª—è –º–∞—à–∏–Ω—ã
    updateMachineLocally: (machineId: number, updates: Partial<MachineWithState>) => void;
    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω—ã (–µ—Å–ª–∏ state_car —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    updateMachineStatusLocally: (machineId: number, newStatus: MachineStatus) => void;
    // –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è state_car (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    updateMachineStateCarLocally: (
        machineId: number,
        updates: Partial<NonNullable<MachineWithState['state_car']>>
    ) => void;
}

const MachineContext = createContext<MachineContextType | undefined>(undefined);

export const MachineProvider = ({ children }: { children: ReactNode }) => {
    const [machines, setMachines] = useState<MachineWithState[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const refreshMachines = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            const fetchedMachines = await getAllMachines();
            setMachines(fetchedMachines);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω');
        } finally {
            setLoading(false);
        }
    }, []);

    // –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
    const updateMachineLocally = useCallback(
        (machineId: number, updates: Partial<MachineWithState>) => {
            setMachines((prevMachines) =>
                prevMachines.map((machine) => {
                    if (machine.car.id === machineId) {
                        // –°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        return { ...machine, ...updates };
                    }
                    return machine;
                })
            );
        },
        []
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ state_car —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const updateMachineStatusLocally = useCallback(
        (machineId: number, newStatus: MachineStatus) => {
            setMachines((prevMachines) =>
                prevMachines.map((machine) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state_car —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
                    if (machine.car.id === machineId && machine.state_car) {
                        return {
                            ...machine,
                            state_car: {
                                ...machine.state_car,
                                status: newStatus,
                            },
                        };
                    }
                    return machine;
                })
            );
        },
        []
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π state_car (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const updateMachineStateCarLocally = useCallback(
        (machineId: number, updates: Partial<NonNullable<MachineWithState['state_car']>>) => {
            setMachines((prevMachines) =>
                prevMachines.map((machine) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state_car —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
                    if (machine.car.id === machineId && machine.state_car) {
                        return {
                            ...machine,
                            state_car: {
                                ...machine.state_car,
                                ...updates,
                            },
                        };
                    }
                    return machine;
                })
            );
        },
        []
    );

    useEffect(() => {
        refreshMachines();
    }, [refreshMachines]);

    // --- –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: useMemo –¥–ª—è value ---
    const contextValue = React.useMemo(
        () => ({
            // <-- useMemo
            machines,
            loading,
            error,
            refreshMachines,
            updateMachineLocally,
            updateMachineStatusLocally,
            updateMachineStateCarLocally,
            // ... –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ...
        }),
        [
            machines,
            loading,
            error,
            refreshMachines,
            updateMachineLocally,
            updateMachineStatusLocally,
            updateMachineStateCarLocally /* ... –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ... */,
        ]
    );
    // --- –ö–û–ù–ï–¶ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ß–ê–°–¢–ò ---

    return (
        <MachineContext.Provider value={contextValue}>
            {/* <-- –ü–µ—Ä–µ–¥–∞–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
            {children}
        </MachineContext.Provider>
    );
};

export const useMachines = (): MachineContextType => {
    const context = useContext(MachineContext);
    if (!context) {
        throw new Error('useMachines must be used within a MachineProvider');
    }
    return context;
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\lib\hooks\useTelegramWebApp.ts =====

// shared/lib/hooks/useTelegramWebApp.ts
import { useEffect, useState } from 'react';

interface TelegramUser {
    id: number;
    first_name: string;
    last_name?: string;
    username?: string;
    language_code?: string;
}

declare global {
    interface Window {
        Telegram?: {
            WebApp: {
                initDataUnsafe: {
                    user?: TelegramUser;
                };
                ready: () => void;
            };
        };
    }
}

export const useTelegramWebApp = () => {
    const [tgUser, setTgUser] = useState<TelegramUser | null>(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
            const user = window.Telegram.WebApp.initDataUnsafe.user || null;
            setTgUser(user);
            setIsLoading(false);
            window.Telegram.WebApp.ready();
        } else {
            setIsLoading(false);
        }
    }, []);

    return { tgUser, isLoading };
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\lib\index.ts =====

// export * from './hooks';
export * from './';


===== C:\Users\USER\Projects\robomine-capital\src\shared\lib\providers\AppProviders.tsx =====

'use client';

// app/appProviders.tsx
import { useState } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { UserProvider } from '@/entities/user';
// import { SplashScreen } from '@/shared/ui';
import { MachineProvider } from '../contexts/MachineContext';

export function AppProviders({ children }: { children: React.ReactNode }) {
    const [queryClient] = useState(
        () =>
            new QueryClient({
                defaultOptions: {
                    queries: {
                        staleTime: 60 * 1000,
                    },
                },
            })
    );

    // const [showSplash, setShowSplash] = useState(true);

    // // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    // useEffect(() => {
    //     const timer = setTimeout(() => {
    //         setShowSplash(false); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–ª–µ—à
    //     }, 3000); // 5000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 5 —Å–µ–∫—É–Ω–¥

    //     // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
    //     return () => clearTimeout(timer);
    // }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    // // –ï—Å–ª–∏ showSplash true, —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    // if (showSplash) {
    //     return <SplashScreen />; // <-- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º SplashScreen
    // }

    return (
        <QueryClientProvider client={queryClient}>
            <UserProvider>
                <MachineProvider>{children}</MachineProvider>
            </UserProvider>
        </QueryClientProvider>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\shared\lib\providers\index.ts =====

export { AppProviders } from './AppProviders';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\back-button\BackButton.tsx =====

'use client';

// @/shared/ui/back-button/BackButton.tsx
import { useRouter } from 'next/navigation';
import { Arrow } from '@/shared/assets/icons';
import styles from './BackButton.module.scss';

export const BackButton = () => {
    const router = useRouter();

    return (
        <button
            className={styles.backButton}
            onClick={() => router.back()}
            aria-label="–ù–∞–∑–∞–¥"
            type="button"
            title="–ù–∞–∑–∞–¥"
        >
            <Arrow className={styles.icon} />
        </button>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\back-button\index.ts =====

export { BackButton } from './BackButton';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\button\Button.tsx =====

import clsx from 'clsx';
import styles from './Button.module.scss';
import { ButtonProps } from './types';

export const Button = ({
    label,
    onClick,
    disabled = false,
    variant = 'primary',
    children,
    className,
    ...props
}: ButtonProps) => {
    const variantClass = styles[`button${variant[0].toUpperCase() + variant.slice(1)}`];

    return (
        <button
            className={clsx(styles.button, variantClass, className, {
                [styles.disabled]: disabled,
            })}
            onClick={onClick}
            disabled={disabled}
            {...props}
        >
            {children}
            {label}
        </button>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\button\index.ts =====

export { Button } from "./Button";

===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\button\types.ts =====

export type Buttonvariant = 'primary' | 'secondary' | 'switch' | 'info' | 'outline';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    label?: string;
    children?: React.ReactNode;
    variant?: Buttonvariant;
    className?: string;
}


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\index.ts =====

export { Button } from './button';
export { InfoButton } from './info-button';
export { BackButton } from './back-button';
export { Modal } from './modal';
export { Input } from './input';
export { ProgressBar } from './progres-bar';
export { SplashScreen } from './splash-screen';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\info-button\InfoButton.tsx =====

import clsx from 'clsx';
import '@/shared/assets/icons';
import { Info } from '@/shared/assets/icons';
import styles from './InfoButton.module.scss';
import { InfoButtonProps } from './types';

export const InfoButton = ({ onClick, className }: InfoButtonProps) => {
    return (
        <button
            type="button"
            className={clsx(styles.infoButton, className)}
            onClick={onClick}
            title="–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
            aria-label="–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        >
            <Info className={styles.icon} />
        </button>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\info-button\index.ts =====

export { InfoButton } from "./InfoButton";

===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\info-button\types.ts =====

export interface InfoButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    className?: string;
}


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\input\Input.tsx =====

// @/shared/ui/input/Input.tsx
import clsx from 'clsx';
import styles from './Input.module.scss';
import { InputProps } from './types';

export const Input = ({
    type = 'text',
    placeholder,
    value,
    onChange,
    error,
    disabled,
    className,
    variant = 'default',
    currency,
    ...props
}: InputProps) => {
    if (variant === 'balance') {
        return (
            <div
                className={clsx(
                    styles.inputWrapper,
                    styles.balanceWrapper,
                    error && styles.error,
                    disabled && styles.disabled
                )}
            >
                <input
                    type={type}
                    className={clsx(styles.input, styles.balanceInput, className)}
                    placeholder={placeholder}
                    value={value}
                    onChange={onChange}
                    disabled={disabled}
                    {...props}
                />
                {currency && <span className={styles.currency}>{currency}</span>}
                {error && <span className={styles.errorMessage}>{error}</span>}
            </div>
        );
    }

    // –û–±—ã—á–Ω—ã–π –∏–Ω–ø—É—Ç
    return (
        <div
            className={clsx(
                styles.inputWrapper,
                error && styles.error,
                disabled && styles.disabled,
                className
            )}
        >
            <input
                type={type}
                className={clsx(styles.input, error && styles.errorInput)}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                disabled={disabled}
                {...props}
            />
            {error && <span className={styles.errorMessage}>{error}</span>}
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\input\index.ts =====

export { Input } from './Input';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\input\types.ts =====

// @/shared/ui/input/types.ts
export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    error?: string;
    variant?: 'default' | 'balance'; // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
    currency?: string; // –í–∞–ª—é—Ç–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
}


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\modal\Modal.tsx =====

'use client';

// @/shared/ui/modal/Modal.tsx
import { useEffect } from 'react';
import styles from './Modal.module.scss';

interface ModalProps {
    isOpen: boolean;
    onClose: () => void;
    children: React.ReactNode;
}

export const Modal = ({ isOpen, onClose, children }: ModalProps) => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
                onClose();
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Ñ–æ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            document.body.style.overflow = 'hidden';
        }

        return () => {
            document.removeEventListener('keydown', handleEscape);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen, onClose]);

    if (!isOpen) return null;

    const handleBackdropClick = (e: React.MouseEvent) => {
        if (e.target === e.currentTarget) {
            onClose();
        }
    };

    return (
        <div className={styles.modalBackdrop} onClick={handleBackdropClick}>
            <button className={styles.closeButton} onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                √ó
            </button>
            <div className={styles.modalContent}>{children}</div>
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\modal\index.ts =====

export { Modal } from './Modal';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\progres-bar\ProgressBar.tsx =====

'use client';

import { memo } from 'react';
import clsx from 'clsx';
import styles from './ProgressBar.module.scss';

interface ProgressBarProps {
    progress: number;
    className?: string;
}

export const ProgressBar = memo(({ progress, className }: ProgressBarProps) => {
    return (
        <div className={clsx(styles.progressBar, className)}>
            <div className={styles.progressFill} style={{ width: `${progress}%` }} />
        </div>
    );
});

ProgressBar.displayName = 'ProgressBar';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\progres-bar\index.ts =====

export { ProgressBar } from './ProgressBar';


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\splash-screen\SplashScreen.tsx =====

'use client';

// src/shared/ui/splash-screen/SplashScreen.tsx
import { useEffect, useState } from 'react';
import { ProgressBar } from '../progres-bar';
import styles from './SplashScreen.module.scss';

export function SplashScreen() {
    const [progress, setProgress] = useState(0);

    useEffect(() => {
        // –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ SplashScreen –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const TOTAL_DURATION_MS = 500; // 3 —Å–µ–∫—É–Ω–¥—ã
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const INTERVAL_TIME_MS = 5;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –∫–∞–∂–¥—ã–π —à–∞–≥
        // 100% / (TOTAL_DURATION_MS / INTERVAL_TIME_MS) = 100% / (3000 / 50) = 100% / 60 = 1.666...%
        const INCREMENT_PER_STEP = 100 / (TOTAL_DURATION_MS / INTERVAL_TIME_MS);

        const interval = setInterval(() => {
            setProgress((prevProgress) => {
                const newProgress = prevProgress + INCREMENT_PER_STEP;
                // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–≥ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª 100%, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if (newProgress >= 100) {
                    clearInterval(interval);
                    return 100;
                }
                return newProgress;
            });
        }, INTERVAL_TIME_MS);

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏: –æ—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
        return () => clearInterval(interval);
    }, []);

    return (
        <div className={styles.splashSceen}>
            <p className={styles.label}>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            <ProgressBar className={styles.progressBar} progress={progress} />
        </div>
    );
}


===== C:\Users\USER\Projects\robomine-capital\src\shared\ui\splash-screen\index.ts =====

// src/shared/ui/splash-screen/index.ts
export { SplashScreen } from './SplashScreen';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\action-buttons\index.ts =====

export { ActionButtons } from './ui/ActionButtons';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\action-buttons\ui\ActionButtons.tsx =====

import Link from 'next/link';
import { Arrow, Invite } from '@/shared/assets/icons';
import styles from './ActionButtons.module.scss';

const actions = [
    {
        key: 'deposit',
        href: '/deposit',
        icon: <Arrow className={styles.icon} />,
        label: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å',
    },
    {
        key: 'withdraw',
        href: '/withdraw',
        icon: <Arrow className={styles.icon} />,
        label: '–í—ã–≤–µ—Å—Ç–∏',
    },
    {
        key: 'referral',
        href: '/referral',
        icon: <Invite className={styles.icon} />,
        label: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å',
    },
];

export const ActionButtons = () => {
    return (
        <div className={styles.actions}>
            {actions.map(({ key, href, icon, label }) => (
                <Link key={key} href={href} className={styles[key]}>
                    <div className={styles.iconWrapper}>{icon}</div>
                    <span className={styles.label}>{label}</span>
                </Link>
            ))}
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\balance\index.ts =====

export { Balance } from './ui/Balance';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\balance\ui\Balance.tsx =====

'use client';

// src/widgets/balance/ui/Balance.tsx
import CountUp from 'react-countup';
import { useUser } from '@/entities/user/model/UserContext';
import { convertCurrency, useCurrencyConverter } from '@/features/currency-converter';
import styles from './Balance.module.scss';

export const Balance = () => {
    const { user } = useUser();
    const { rates } = useCurrencyConverter();

    const userBalance =
        user?.balance !== undefined && user?.balance !== null ? Number(user.balance) : 0;

    const balanceRub = rates
        ? convertCurrency({
              amount: userBalance,
              from: 'USDT',
              to: 'RUB',
              rates: rates,
          })
        : 0;

    const formattedBalanceRub = balanceRub.toFixed(2);
    const formattedBalanceUSDT = userBalance.toFixed(2);

    return (
        <div className={styles.balance}>
            <div className={styles.balanceRUB}>
                <CountUp
                    end={parseFloat(formattedBalanceRub)}
                    decimals={2}
                    duration={0.5}
                    separator=" "
                    decimal="."
                    prefix=""
                    suffix=" "
                />
                <span>RUB</span>
            </div>
            <div className={styles.balanceUSDT}>
                <CountUp
                    end={parseFloat(formattedBalanceUSDT)} // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    decimals={2}
                    duration={0.5} // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    separator=" " // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    decimal="."
                    prefix="" // –ü—Ä–µ—Ñ–∏–∫—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, "$")
                    suffix=" "
                    className={styles.value}
                />
                <span>USDT</span>
            </div>
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\header\index.ts =====

export { Header } from './ui/Header';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\header\ui\Header.tsx =====

import { Balance } from '@/widgets/balance';
import { User } from '@/widgets/user';
import styles from './Header.module.scss';

export const Header = () => {
    return (
        <header className={styles.header}>
            <User />
            <Balance />
        </header>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\index.ts =====

export * from './model/';
export * from './ui/';

===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\model\index.ts =====

export type { MachineCardProps, MachineInfoModalProps } from './types';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\model\machines.ts =====

// @/widgets/machine-card/model/machines.ts
export const MACHINES = [
    {
        id: 1,
        imageType: 1,
        price: 15,
    },
    {
        id: 2,
        imageType: 3,
        price: 150,
    },
    {
        id: 3,
        imageType: 3,
        price: 500,
    },
    {
        id: 4,
        imageType: 4,
        price: 1000,
    },
    {
        id: 5,
        imageType: 5,
        price: 2500,
    },
    {
        id: 6,
        imageType: 6,
        price: 5000,
    },
    {
        id: 7,
        imageType: 7,
        price: 7500,
    },
    {
        id: 8,
        imageType: 8,
        price: 10000,
    },
];


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\model\types.ts =====

// @/widgets/machine-card/model/types.ts
import { MachineWithState } from '@/entities/machine';

type CardAction = 'purchased' | 'activated' | 'transitioned';
export interface MachineCardProps {
    image: string;
    price: number;
    status: 'not_purchased' | 'awaiting' | 'in_progress' | 'waiting_for_reward' | 'completed';
    isPurchased: boolean;
    onAction?: (action: CardAction, machineId: number) => void;
    machineData?: MachineWithState;
}

export interface MachineInfoModalProps {
    isOpen: boolean;
    onClose: () => void;
    machine: MachineWithState;
    status: string;
}


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\ui\BuyMachineLink.tsx =====

// @/widgets/machine-card/ui/BuyMoreCard.tsx
import Image from 'next/image';
import Link from 'next/link';
import styles from './BuyMachineLink.module.scss';

export const BuyMachineLink = () => {
    return (
        <Link className={styles.shopLink} href="/shop">
            <div className={styles.imageWrapper}>
                <Image
                    src="/images/mascot.png"
                    width={100}
                    height={100}
                    alt="–†–æ–±–æ—Ç"
                    className={styles.mascotImage}
                />
            </div>
            <span className={styles.label}>–ö—É–ø–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω—É</span>
        </Link>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\ui\BuyMoreCard.tsx =====

// @/widgets/machine-card/ui/BuyMoreCard.tsx
import Link from 'next/link';
import styles from './BuyMoreCard.module.scss';

export const BuyMoreCard = () => {
    return (
        <Link href="/shop" className={styles.buyMoreCard}>
            <div className={styles.plate} />
            <span className={styles.add}>+</span>
            <span className={styles.label}>–ö—É–ø–∏—Ç—å –µ—â—ë</span>
        </Link>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\ui\MachineCard.tsx =====

'use client';

// @/widgets/machine-card/ui/MachineCard.tsx
import { useCallback, useEffect, useRef, useState } from 'react';
import { memo } from 'react';
import Image from 'next/image';
import clsx from 'clsx';
import { activateMachine, purchaseMachine, transitionMachine } from '@/entities/machine';
import { useUser } from '@/entities/user';
import { useMachines } from '@/shared/lib/contexts/MachineContext';
import { InfoButton, ProgressBar } from '@/shared/ui';
import { MachineCardProps } from '../model';
import styles from './MachineCard.module.scss';
import { MachineInfoModal } from './MachineInfoModal';

export const MachineCard = memo(
    ({ status, price, image, machineData, onAction }: MachineCardProps) => {
        const { updateMachineStatusLocally } = useMachines();
        const { refreshUserBalance } = useUser();
        const [isModalOpen, setIsModalOpen] = useState(false);
        const [currentStatus, setCurrentStatus] = useState(status);
        const [progress, setProgress] = useState<number>(0);
        const [lastUpdated, setLastUpdated] = useState<number | null>(null);
        const [isProcessing, setIsProcessing] = useState(false);
        const [actionError, setActionError] = useState<string | null>(null);
        const intervalRef = useRef<NodeJS.Timeout | null>(null);

        const isPurchased = currentStatus !== 'not_purchased';

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–æ–ø—Å–∞–º–∏
        useEffect(() => {
            setCurrentStatus(status);
        }, [status]);

        // --- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é ---
        const earnings = Number(machineData?.car?.daily_replenishment || 0);

        // --- –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã ---
        const getWorkTime = (): number => {
            const workTime = Number(process.env.NEXT_PUBLIC_CAR_WORK_TIME);
            return isNaN(workTime) ? 30 : workTime;
        };

        // --- –û–±–Ω–æ–≤–ª—è–µ–º lastUpdated –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ machineData ---
        useEffect(() => {
            if (machineData?.state_car?.last_updated) {
                setLastUpdated(machineData.state_car.last_updated);
            }
        }, [machineData?.state_car?.last_updated]);

        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        useEffect(() => {
            return () => {
                if (intervalRef.current) {
                    clearInterval(intervalRef.current);
                }
            };
        }, []);

        // --- –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
        useEffect(() => {
            if (currentStatus !== 'in_progress' || !lastUpdated || !machineData?.car?.id) {
                return;
            }

            const startTime = lastUpdated;
            const workTime = getWorkTime();
            const endTime = startTime + workTime;

            const updateProgress = () => {
                const now = Math.floor(Date.now() / 1000);
                const remaining = Math.max(0, endTime - now);
                const elapsed = workTime - remaining;
                const progressPercent = Math.min(100, Math.max(0, (elapsed / workTime) * 100));

                setProgress(progressPercent);

                if (progressPercent >= 100) {
                    setCurrentStatus('waiting_for_reward');
                    if (machineData.car.id) {
                        updateMachineStatusLocally(machineData.car.id, 'waiting_for_reward');
                    }
                    return false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                }
                return true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            };

            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            updateProgress();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            const interval = setInterval(() => {
                if (!updateProgress()) {
                    clearInterval(interval);
                }
            }, 1000);

            intervalRef.current = interval;

            const intervalId = intervalRef.current;

            return () => {
                if (intervalId) {
                    clearInterval(intervalId);
                }
            };
        }, [currentStatus, lastUpdated, machineData?.car?.id, updateMachineStatusLocally]);

        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
        useEffect(() => {
            const handleMachinePurchased = (event: CustomEvent) => {
                if (event.detail.machineId === machineData?.car?.id) {
                    setCurrentStatus('awaiting');
                }
            };

            const handleMachineActivated = (event: CustomEvent) => {
                if (event.detail.machineId === machineData?.car?.id) {
                    setCurrentStatus('in_progress');
                    setLastUpdated(event.detail.lastUpdated || Math.floor(Date.now() / 1000));
                }
            };

            const handleMachineTransitioned = (event: CustomEvent) => {
                if (event.detail.machineId === machineData?.car?.id) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
                    const nextState =
                        machineData?.state_car?.remaining_uses &&
                        machineData.state_car.remaining_uses > 1
                            ? 'awaiting'
                            : 'completed';
                    setCurrentStatus(nextState);
                }
            };

            window.addEventListener('machinePurchased', handleMachinePurchased as EventListener);
            window.addEventListener('machineActivated', handleMachineActivated as EventListener);
            window.addEventListener(
                'machineTransitioned',
                handleMachineTransitioned as EventListener
            );

            return () => {
                window.removeEventListener(
                    'machinePurchased',
                    handleMachinePurchased as EventListener
                );
                window.removeEventListener(
                    'machineActivated',
                    handleMachineActivated as EventListener
                );
                window.removeEventListener(
                    'machineTransitioned',
                    handleMachineTransitioned as EventListener
                );
            };
        }, [machineData?.car?.id, machineData?.state_car?.remaining_uses]);

        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ ---
        const handleBuy = async () => {
            if (isProcessing || !machineData?.car?.id) return;

            setIsProcessing(true);
            setActionError(null);

            try {
                const success = await purchaseMachine({ car_id: machineData.car.id });

                if (success) {
                    console.log(`–ú–∞—à–∏–Ω–∞ ${machineData.car.id} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞.`);

                    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    setCurrentStatus('awaiting');
                    updateMachineStatusLocally(machineData.car.id, 'awaiting');

                    window.dispatchEvent(
                        new CustomEvent('machinePurchased', {
                            detail: { machineId: machineData.car.id },
                        })
                    );

                    if (onAction) {
                        onAction('purchased', machineData.car.id);
                    }

                    // --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                    try {
                        await refreshUserBalance();
                        console.log('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω—ã.');
                    } catch (balanceError) {
                        console.error(
                            '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω—ã:',
                            balanceError
                        );
                        // –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                    }
                    // --- –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
                } else {
                    throw new Error('–°–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∏–ª –æ –Ω–µ—É–¥–∞—á–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.');
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–∞—à–∏–Ω—ã:', err);
                let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                if (err instanceof Error) {
                    if (err.message.includes('Insufficient funds')) {
                        errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.';
                    }
                }
                setActionError(errorMessage);
            } finally {
                setIsProcessing(false);
            }
        };

        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ---
        const handleActivate = async () => {
            if (isProcessing || !machineData?.car?.id) return;

            setIsProcessing(true);
            setActionError(null);

            try {
                const result = await activateMachine({ car_id: machineData.car.id });

                if (result) {
                    console.log(`–ú–∞—à–∏–Ω–∞ ${machineData.car.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.`);

                    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    const newStatus = 'in_progress';
                    setCurrentStatus(newStatus);
                    updateMachineStatusLocally(machineData.car.id, newStatus);

                    const lastUpdated = Math.floor(Date.now() / 1000);
                    setLastUpdated(lastUpdated); // ‚Üê –≠—Ç–æ –≤–∞–∂–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ
                    window.dispatchEvent(
                        new CustomEvent('machineActivated', {
                            detail: {
                                machineId: machineData.car.id,
                                lastUpdated,
                            },
                        })
                    );

                    if (onAction) {
                        onAction('activated', machineData.car.id);
                    }

                    // --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é,
                    // –Ω–æ –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
                    /*
                    try {
                        await refreshUserBalance();
                        console.log("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã.");
                    } catch (balanceError) {
                        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã:", balanceError);
                    }
                    */
                    // --- –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', err);
                setActionError('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã');
            } finally {
                setIsProcessing(false);
            }
        };

        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã ---
        const handleCollectReward = async () => {
            if (isProcessing || !machineData?.state_car?.id) return;

            setIsProcessing(true);
            setActionError(null);

            try {
                const result = await transitionMachine({
                    car_to_user_id: machineData.state_car.id,
                });

                if (result) {
                    console.log(`–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –º–∞—à–∏–Ω—ã ${machineData.car.id}.`);

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
                    const nextState =
                        machineData.state_car.remaining_uses > 1 ? 'awaiting' : 'completed';
                    setCurrentStatus(nextState);
                    updateMachineStatusLocally(machineData.car.id, nextState);

                    if (onAction) {
                        onAction('transitioned', machineData.car.id);
                    }

                    // --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                    try {
                        await refreshUserBalance();
                        console.log('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.');
                    } catch (balanceError) {
                        console.error(
                            '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:',
                            balanceError
                        );
                        // –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                    }
                    // --- –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:', err);
                setActionError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
            } finally {
                setIsProcessing(false);
            }
        };

        // --- –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ü–µ–Ω—ã ---
        const getDisplayText = useCallback(() => {
            if (!isPurchased) {
                return `${price} USDT`;
            }

            switch (currentStatus) {
                case 'awaiting':
                    return `+${earnings} USDT –∑–∞ 23 —á.`;
                case 'in_progress':
                    return '–†–∞–±–æ—Ç–∞–µ–º...';
                case 'waiting_for_reward':
                    return `${earnings} USDT`;
                case 'completed':
                    return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
                default:
                    return `${price} USDT`;
            }
        }, [isPurchased, currentStatus, price, earnings]);

        // --- –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ---
        const getStatusText = useCallback(() => {
            if (!isPurchased) return isProcessing ? '–ü–æ–∫—É–ø–∫–∞...' : '–ö—É–ø–∏—Ç—å';

            switch (currentStatus) {
                case 'awaiting':
                    return isProcessing ? '–ê–∫—Ç–∏–≤–∞—Ü–∏—è...' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
                case 'in_progress':
                    return <ProgressBar progress={progress} className={styles.progressBar} />;
                case 'waiting_for_reward':
                    return isProcessing ? '–ü–æ–ª—É—á–µ–Ω–∏–µ...' : '–ó–∞–±—Ä–∞—Ç—å';
                case 'completed':
                    return '–ö—É–ø–∏—Ç—å';
                default:
                    return '–ö—É–ø–ª–µ–Ω–∞';
            }
        }, [isPurchased, currentStatus, isProcessing, progress]);

        // --- –ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ---
        const getActionHandler = () => {
            if (!machineData?.car?.id) return undefined;

            if (!isPurchased) {
                return handleBuy;
            }

            switch (currentStatus) {
                case 'awaiting':
                    return handleActivate;
                case 'waiting_for_reward':
                    return handleCollectReward;
                default:
                    return undefined;
            }
        };

        const actionHandler = getActionHandler();

        return (
            <>
                <button
                    className={clsx(styles.card)}
                    onClick={actionHandler}
                    type="button"
                    aria-label={`–ú–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω–∞ –∑–∞ ${price} USDT`}
                    disabled={isProcessing}
                >
                    <InfoButton
                        className={styles.infoButton}
                        onClick={() => setIsModalOpen(true)}
                    />
                    <div className={styles.plate} />

                    <Image
                        className={clsx(styles.image, { [styles.purchased]: isPurchased })}
                        src={`/images/${image}`}
                        width={100}
                        height={100}
                        alt="–ú–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω–∞"
                    />

                    {getDisplayText() && (
                        <span className={styles.displayText}>{getDisplayText()}</span>
                    )}

                    {getStatusText() && (
                        <span className={styles.statusText}>{getStatusText()}</span>
                    )}

                    {/* --- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ --- */}
                    {actionError && <div className={styles.buyError}>{actionError}</div>}
                </button>

                {machineData && (
                    <MachineInfoModal
                        isOpen={isModalOpen}
                        onClose={() => setIsModalOpen(false)}
                        machine={machineData}
                        status={currentStatus}
                    />
                )}
            </>
        );
    }
);

MachineCard.displayName = 'MachineCard';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\ui\MachineInfoModal.tsx =====

// @/widgets/machine-card/ui/MachineInfoModal.tsx
import Image from 'next/image';
import { Modal } from '@/shared/ui';
import { MachineInfoModalProps } from '../model';
import styles from './MachineInfoModal.module.scss';

export const MachineInfoModal = ({ isOpen, onClose, machine }: MachineInfoModalProps) => {
    // --- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é ---
    const earnings = Number(machine.car.daily_replenishment || 0);

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <div className={styles.machineInfo}>
                <h2 className={styles.title}>
                    {machine.car.name || `–ú–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω–∞ #${machine.car.id}`}
                </h2>

                <div className={styles.imageContainer}>
                    <Image
                        src={`/images/${machine.car.image}`}
                        width={200}
                        height={200}
                        alt="–ú–∞–π–Ω–∏–Ω–≥-–º–∞—à–∏–Ω–∞"
                    />
                </div>

                <div className={styles.infoGrid}>
                    <div className={styles.infoItem}>
                        <span className={styles.label}>–¶–µ–Ω–∞:</span>
                        <span className={styles.value}>{machine.car.price} USDT</span>
                    </div>

                    <div className={styles.infoItem}>
                        <span className={styles.label}>–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Å—Ä–æ–∫ —Å–ª—É–∂–±—ã):</span>
                        <span className={styles.value}>{machine.car.lifespan} –¥–Ω–µ–π</span>
                    </div>

                    <div className={styles.infoItem}>
                        <span className={styles.label}>–î–æ—Ö–æ–¥ –∑–∞ 1 –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</span>
                        <span className={styles.value}>+{earnings} USDT</span>
                    </div>
                </div>
            </div>
        </Modal>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\machine-card\ui\index.ts =====

export { BuyMachineLink } from './BuyMachineLink';
export { BuyMoreCard } from './BuyMoreCard';
export { MachineCard } from './MachineCard';
export { MachineInfoModal } from './MachineInfoModal';
export {} from './';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-balance\index.ts =====

export { ReferralBalance } from './ui/ReferralBalance';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-balance\ui\ReferralBalance.tsx =====

'use client';

// src/widgets/balance/ui/Balance.tsx
import CountUp from 'react-countup';
import { useUser } from '@/entities/user/model/UserContext';
import { convertCurrency, useCurrencyConverter } from '@/features/currency-converter';
import styles from './ReferralBalance.module.scss';

export const ReferralBalance = () => {
    const { user } = useUser();
    const { rates } = useCurrencyConverter();

    const userBalance =
        user?.referrer_profit !== undefined && user?.referrer_profit !== null
            ? Number(user.referrer_profit)
            : 0;

    const balanceRub = rates
        ? convertCurrency({
              amount: userBalance,
              from: 'USDT',
              to: 'RUB',
              rates: rates,
          })
        : 0;

    const formattedBalanceRub = balanceRub.toFixed(2);
    const formattedBalanceUSDT = userBalance.toFixed(2);

    return (
        <div className={styles.balance}>
            <div className={styles.balanceRUB}>
                <CountUp
                    end={parseFloat(formattedBalanceRub)}
                    decimals={2}
                    duration={1}
                    separator=" "
                    decimal="."
                    prefix=""
                    suffix=""
                />
                <span>RUB</span>
            </div>
            <div className={styles.balanceUSDT}>
                <CountUp
                    end={parseFloat(formattedBalanceUSDT)} // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    decimals={2}
                    duration={0.5} // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    separator=" " // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    decimal="."
                    prefix="" // –ü—Ä–µ—Ñ–∏–∫—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, "$")
                    suffix=" "
                    className={styles.value}
                />
                <span>USDT</span>
            </div>
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-card\index.ts =====

export { ReferralCard } from './ui/ReferralCard';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-card\model\index.ts =====

export type { MachineCardProps } from './types';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-card\model\machines.ts =====

// @/widgets/machine-card/model/machines.ts
export const MACHINES = [
    {
        id: 1,
        imageType: 1,
        price: 15,
    },
    {
        id: 2,
        imageType: 3,
        price: 150,
    },
    {
        id: 3,
        imageType: 3,
        price: 500,
    },
    {
        id: 4,
        imageType: 4,
        price: 1000,
    },
    {
        id: 5,
        imageType: 5,
        price: 2500,
    },
    {
        id: 6,
        imageType: 6,
        price: 5000,
    },
    {
        id: 7,
        imageType: 7,
        price: 7500,
    },
    {
        id: 8,
        imageType: 8,
        price: 10000,
    },
];


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-card\model\types.ts =====

export type MachineCardProps = {
    className?: string;
    plateType: number;
    imageType: number;
    price: number;
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-card\ui\ReferralCard.tsx =====

// @/widgets/referral-card/ui/ReferralCard.tsx
import Image from 'next/image';
import { UserAttributes } from '@/entities/user/model/types';
import styles from './ReferralCard.module.scss';

// –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
interface ReferralCardProps {
    referral: Omit<UserAttributes, 'ban_until' | 'created_at' | 'updated_at'>;
}

export const ReferralCard = async ({ referral }: ReferralCardProps) => {
    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å "–ø—Ä–∏–±—ã–ª—å" —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å referral.ref_balance –∏–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ
    const profit = referral.ref_balance || 0;

    return (
        <div className={styles.card}>
            {/* TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–≤–∞—Ç–∞—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å */}
            <Image
                className={styles.avatar}
                src={`/images/machine1.png`} // –ó–∞–≥–ª—É—à–∫–∞
                width={100}
                height={100}
                alt={`–ê–≤–∞—Ç–∞—Ä ${referral.username}`}
            />
            <span className={styles.username}>
                {referral.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referral.telegram_id}`}
            </span>
            <span className={styles.profit}>+{profit} USDT</span>
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-link\ReferralLink.tsx =====

// @/shared/ui/referral-link/ReferralLink.tsx
import { Copy } from '@/shared/assets/icons';
import { Input } from '@/shared/ui';
import styles from './ReferralLink.module.scss';

interface ReferralLinkProps {
    telegramId?: number;
}

export const ReferralLink = ({ telegramId }: ReferralLinkProps) => {
    const referralLink = `https://t.me/RoboMine_CapitalBot?start=${telegramId}`;

    const handleCopy = async () => {
        navigator.clipboard.writeText(referralLink).then(() => {});
    };

    return (
        <div className={styles.referralLinkWrapper}>
            <button
                className={styles.referralLink}
                onClick={handleCopy}
                type="button"
                aria-label={''}
            >
                <Input
                    className={styles.input}
                    type="text"
                    variant="default"
                    placeholder="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
                    value={referralLink}
                    readOnly
                />

                <Copy className={styles.copyIcon} />
            </button>
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-link\index.ts =====

export { ReferralLink } from './ReferralLink';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-list\index.ts =====

export { ReferralList } from './ui/ReferralList';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\referral-list\ui\ReferralList.tsx =====

// @/features/referral/ui/ReferralList.tsx
import { UserAttributes } from '@/entities/user';
import { ReferralCard } from '@/widgets/referral-card';
import styles from './ReferralList.module.scss';

interface ReferralListProps {
    referrals: Omit<UserAttributes, 'ban_until' | 'created_at' | 'updated_at'>[];
}

export const ReferralList = ({ referrals }: ReferralListProps) => {
    if (referrals.length === 0) {
        return <p className={styles.emptyList}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.</p>;
    }

    return (
        <div className={styles.referralList}>
            {referrals.map((referral) => (
                <ReferralCard key={referral.telegram_id} referral={referral} />
            ))}
        </div>
    );
};


===== C:\Users\USER\Projects\robomine-capital\src\widgets\user\index.ts =====

export { User } from './ui/User';


===== C:\Users\USER\Projects\robomine-capital\src\widgets\user\ui\User.tsx =====

'use client';

import { useUser } from '@/entities/user';
import styles from './User.module.scss';

export const User = () => {
    const { user } = useUser();

    return (
        <div className={styles.user}>
            {/* <span className={styles.userStatus}>{String(user?.blago_status)}</span> */}
            <span className={styles.userName}>
                {user?.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user?.telegram_id}`}
            </span>
        </div>
    );
};


===== –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê =====

.
‚îú‚îÄ‚îÄ .env.local
‚îú‚îÄ‚îÄ .eslintrc.js
‚îú‚îÄ‚îÄ .prettierrc
‚îú‚îÄ‚îÄ colect-
‚îú‚îÄ‚îÄ collect-code.js
‚îú‚îÄ‚îÄ eslint.config.mjs
‚îú‚îÄ‚îÄ full_code.txt
‚îú‚îÄ‚îÄ next-env.d.ts
‚îú‚îÄ‚îÄ next.config.ts
‚îú‚îÄ‚îÄ package-lock.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ public
    ‚îî‚îÄ‚îÄ images
    ‚îÇ   ‚îú‚îÄ‚îÄ machine1.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine2.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine3.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine4.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine5.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine6.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine7.png
    ‚îÇ   ‚îú‚îÄ‚îÄ machine8.png
    ‚îÇ   ‚îú‚îÄ‚îÄ mascot.png
    ‚îÇ   ‚îî‚îÄ‚îÄ splash-screen.png
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ app
    ‚îÇ   ‚îú‚îÄ‚îÄ deposit
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Deposit.module.scss
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ error.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ Home.module.scss
    ‚îÇ   ‚îú‚îÄ‚îÄ icon.svg
    ‚îÇ   ‚îú‚îÄ‚îÄ layout.module.scss
    ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ loading.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ not-found.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ referral
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Referral.module.scss
    ‚îÇ   ‚îú‚îÄ‚îÄ shop
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Shop.module.scss
    ‚îÇ   ‚îî‚îÄ‚îÄ withdraw
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Withdraw.module.scss
    ‚îú‚îÄ‚îÄ entities
    ‚îÇ   ‚îú‚îÄ‚îÄ deposit
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ deposit.api.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îú‚îÄ‚îÄ machine
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ machine.api.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îú‚îÄ‚îÄ user
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ user.api.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserContext.tsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useUserInit.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îî‚îÄ‚îÄ withdrawal
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ withdrawal.api.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.ts
    ‚îú‚îÄ‚îÄ features
    ‚îÇ   ‚îú‚îÄ‚îÄ auth
    ‚îÇ   ‚îú‚îÄ‚îÄ claim-animation
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ClaimAnimation.module.scss
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ClaimAnimation.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ currency-converter
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ converter.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useCurrencyConverter.tsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îú‚îÄ‚îÄ deposit
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DepositForm.module.scss
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ DepositForm.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ mining
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ClaimAnimation.tsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MachineList.module.scss
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MachineList.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ timer
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useTimer.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îî‚îÄ‚îÄ withdraw
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ hooks.ts
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ WithdrawForm.module.scss
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ WithdrawForm.tsx
    ‚îú‚îÄ‚îÄ shared
    ‚îÇ   ‚îú‚îÄ‚îÄ api
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ axios.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ telegram-web-app.d.ts
    ‚îÇ   ‚îú‚îÄ‚îÄ assets
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ icons
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Arrow.tsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Copy.tsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Info.tsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Invite.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ config
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ env.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îú‚îÄ‚îÄ lib
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ contexts
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MachineContext.tsx
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useTelegramWebApp.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ providers
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AppProviders.tsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îú‚îÄ‚îÄ styles
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ global.scss
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ _animations.scss
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ _mixins.scss
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ _variables.scss
    ‚îÇ   ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ back-button
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ BackButton.module.scss
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ BackButton.tsx
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ button
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Button.module.scss
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Button.tsx
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ info-button
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ InfoButton.module.scss
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ InfoButton.tsx
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ input
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Input.module.scss
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Input.tsx
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modal
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Modal.module.scss
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ Modal.tsx
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ progres-bar
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ProgressBar.module.scss
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ProgressBar.tsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ splash-screen
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ SplashScreen.module.scss
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ SplashScreen.tsx
    ‚îî‚îÄ‚îÄ widgets
    ‚îÇ   ‚îú‚îÄ‚îÄ action-buttons
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ActionButtons.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ActionButtons.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ balance
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ Balance.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ Balance.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ header
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ store
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ Header.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ Header.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ machine-card
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ machines.ts
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ BuyMachineLink.module.scss
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ BuyMachineLink.tsx
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ BuyMoreCard.module.scss
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ BuyMoreCard.tsx
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MachineCard.module.scss
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MachineCard.tsx
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MachineInfoModal.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ MachineInfoModal.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ referral
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ   ‚îú‚îÄ‚îÄ referral-balance
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ReferralBalance.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ReferralBalance.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ referral-card
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ machines.ts
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ReferralCard.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ReferralCard.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ referral-link
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ ReferralLink.module.scss
    ‚îÇ       ‚îî‚îÄ‚îÄ ReferralLink.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ referral-list
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ReferralList.module.scss
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ReferralList.tsx
    ‚îÇ   ‚îî‚îÄ‚îÄ user
    ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ model
    ‚îÇ       ‚îî‚îÄ‚îÄ ui
    ‚îÇ           ‚îú‚îÄ‚îÄ User.module.scss
    ‚îÇ           ‚îî‚îÄ‚îÄ User.tsx
‚îî‚îÄ‚îÄ tsconfig.json
